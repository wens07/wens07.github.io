<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>makefile_common</title>
    <url>/2015/01/2015-1-2015-01-04-makefile-common/</url>
    <content><![CDATA[<h2 id="makefile-to-include-commom-mk"><a href="#makefile-to-include-commom-mk" class="headerlink" title="makefile to include commom.mk"></a>makefile to include commom.mk</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"> library := libcodec.a</span><br><span class="line">sources := <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> ../../common.mk</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="the-common-mk-file"><a href="#the-common-mk-file" class="headerlink" title="the common.mk file"></a>the common.mk file</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">   objects := <span class="variable">$(<span class="built_in">subst</span> .c,.o,<span class="variable">$(sources)</span>)</span></span><br><span class="line">dependencies := <span class="variable">$(<span class="built_in">subst</span> .c,.d,<span class="variable">$(sources)</span>)</span></span><br><span class="line">include_dirs := .. ../../<span class="keyword">include</span></span><br><span class="line">CPPFLAGS     += <span class="variable">$(<span class="built_in">addprefix</span> -I ,<span class="variable">$(include_dirs)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">vpath</span> %.h <span class="variable">$(include_dirs)</span></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: library</span></span><br><span class="line"><span class="section">library: <span class="variable">$(library)</span></span></span><br><span class="line">     <span class="variable">$(library)</span>: <span class="variable">$(objects)</span></span><br><span class="line">             <span class="variable">$(AR)</span> <span class="variable">$(ARFLAGS)</span> <span class="variable">$@</span> <span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">           <span class="variable">$(RM)</span> <span class="variable">$(objects)</span> <span class="variable">$(program)</span> <span class="variable">$(library)</span> <span class="variable">$(dependencies)</span> <span class="variable">$(extra_clean)</span></span><br><span class="line">   <span class="keyword">ifneq</span> <span class="string">&quot;<span class="variable">$(MAKECMDGOALS)</span>&quot;</span> <span class="string">&quot;clean&quot;</span></span><br><span class="line">     <span class="keyword">-include</span> <span class="variable">$(dependencies)</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">   %.c %.h: %.y</span><br><span class="line">           $(YACC.y) --defines <span class="variable">$&lt;</span></span><br><span class="line">           <span class="variable">$(MV)</span> y.tab.c <span class="variable">$*</span>.c</span><br><span class="line">           <span class="variable">$(MV)</span> y.tab.h <span class="variable">$*</span>.h</span><br><span class="line">    %.d: %.c</span><br><span class="line">           <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(CPPFLAGS)</span> <span class="variable">$(TARGET_ARCH)</span> -M <span class="variable">$&lt;</span> |      \</span><br><span class="line">           <span class="variable">$(SED)</span> &#x27;s,\(<span class="variable">$*</span>\.o\) *:,\1 <span class="variable">$@</span>: ,&#x27; &gt; <span class="variable">$@</span>.tmp</span><br><span class="line">           <span class="variable">$(MV)</span> <span class="variable">$@</span>.tmp <span class="variable">$@</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>makefile convention</title>
    <url>/2015/01/2015-1-2015-01-04-makefile-convention/</url>
    <content><![CDATA[<h2 id="variable-convention"><a href="#variable-convention" class="headerlink" title="variable convention"></a>variable convention</h2><p><em>variables</em> that are internal to makefile are lowercase; <em>variables</em> that might be set from the<br>command line are uppercased.</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>makefile memo(1)</title>
    <url>/2015/01/2015-1-2015-01-04-makefile-memo-1/</url>
    <content><![CDATA[<h3 id="set-makefile-dependency"><a href="#set-makefile-dependency" class="headerlink" title="set makefile dependency"></a>set makefile dependency</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">VPATH    = src <span class="keyword">include</span></span><br><span class="line">CPPFLAGS = -I <span class="keyword">include</span></span><br><span class="line">SOURCES  = count_words.c \</span><br><span class="line">             lexer.c       \</span><br><span class="line">             counter.c</span><br><span class="line"><span class="section">count_words: counter.o lexer.o -lfl</span></span><br><span class="line">  count_words.o: counter.h</span><br><span class="line">  counter.o: counter.h lexer.h</span><br><span class="line">  lexer.o: lexer.h</span><br><span class="line">  <span class="keyword">include</span> <span class="variable">$(<span class="built_in">subst</span> .c,.d,<span class="variable">$(SOURCES)</span>)</span></span><br><span class="line">  %.d: %.c</span><br><span class="line">     <span class="variable">$(CC)</span> -M <span class="variable">$(CPPFLAGS)</span> <span class="variable">$&lt;</span> &gt; <span class="variable">$@</span>.$$$$;  \</span><br><span class="line">     sed &#x27;s,\(<span class="variable">$*</span>\)\.o[ :]*,\1.o <span class="variable">$@</span> : ,g&#x27; &lt; <span class="variable">$@</span>.$$$$ &gt; <span class="variable">$@</span>;     \</span><br><span class="line">     rm -f <span class="variable">$@</span>.$$$$</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="and"><a href="#and" class="headerlink" title="@ and -"></a>@ and -</h3><p>@: the silent command modifier<br>    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">	ifndef VERBOSE</span><br><span class="line">		QUIET := @</span><br><span class="line">	endif</span><br><span class="line"></span><br><span class="line">	target:</span><br><span class="line">		$(QUIET) <span class="built_in">echo</span> .....</span><br><span class="line">	```  </span><br><span class="line"></span><br><span class="line"> prevent makefile to <span class="built_in">print</span> or output warning</span><br><span class="line"></span><br><span class="line"><span class="comment">### echo commands executed from shell function</span></span><br><span class="line"></span><br><span class="line">`make SHELL=<span class="string">&#x27;/bin/bash -x&#x27;</span> -f makefile`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### *lazy initialization for variable*</span></span><br><span class="line"></span><br><span class="line">```makefile</span><br><span class="line">	<span class="comment">#(call find-compilation-dirs, root-directory)</span></span><br><span class="line">	find-compilation-dirs = 		\</span><br><span class="line">		$(patsubst %/,%,			\</span><br><span class="line">			$(<span class="built_in">sort</span>					\</span><br><span class="line">				$(<span class="built_in">dir</span>				\</span><br><span class="line">					$(shell $(FIND) <span class="variable">$1</span> -name <span class="string">&#x27;*.cpp&#x27;</span>))))</span><br><span class="line"></span><br><span class="line">    PACKAGE_DIRS = $(redefine-package-dirs) $(PACKAGE_DIRS)</span><br><span class="line"></span><br><span class="line">	redefine-packge-dirs = \</span><br><span class="line">		$(<span class="built_in">eval</span> PACKAGE_DIRS := $(call find-compilation-dirs, $(SOURCE_DIR)))</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>Explain above in detail:</p>
<ol>
<li>When make reads these variables, it simply records their righthand side because the variables are recursive.</li>
<li>The first time the PACKAGE_DIRS variable is used, make retrieves the righthand side and expands the first variable, redefine-package-dirs.</li>
<li>The value of redefine-package-dirs is a single function call, eval.</li>
<li>The body of the eval redefines the recursive variable, PACKAGE_DIRS, as a simple variable whose value is the set of directories returned by find-compilation-dirs. Now PACKAGE_DIRS has been initialized with the directory list.￼￼￼￼￼</li>
<li>The redefine-package-dirs variable is expanded to the empty string (because eval expands to the empty string).</li>
<li>Now make continues to expand the original righthand side of PACKAGE_DIRS. The only thing left to do is expand the variable PACKAGE_DIRS. make looks up the value of the variable, sees a simple variable, and returns its value.</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>norecurrence makfefile for multi-modules</title>
    <url>/2015/01/2015-1-2015-01-04-norecurrence-makfefile-for-multi-modules/</url>
    <content><![CDATA[<h2 id="modules-makefile-module-mk"><a href="#modules-makefile-module-mk" class="headerlink" title="modules makefile(module.mk)"></a>modules makefile(module.mk)</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">   local_dir  := lib/codec</span><br><span class="line">   local_lib  := <span class="variable">$(local_dir)</span>/libcodec.a</span><br><span class="line">local_src  := <span class="variable">$(<span class="built_in">addprefix</span> <span class="variable">$(local_dir)</span>/,codec.c)</span></span><br><span class="line">local_objs := <span class="variable">$(<span class="built_in">subst</span> .c,.o,<span class="variable">$(local_src)</span>)</span></span><br><span class="line"></span><br><span class="line">libraries  += <span class="variable">$(local_lib)</span></span><br><span class="line">sources    += <span class="variable">$(local_src)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(local_lib)</span>: <span class="variable">$(local_objs)</span></span><br><span class="line">        <span class="variable">$(AR)</span> <span class="variable">$(ARFLAGS)</span> <span class="variable">$@</span> <span class="variable">$^</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="top-makefile"><a href="#top-makefile" class="headerlink" title="top makefile"></a>top makefile</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Collect information from each module in these four variables.</span></span><br><span class="line"><span class="comment"># Initialize them here as simple variables.</span></span><br><span class="line">programs     :=</span><br><span class="line">sources      :=</span><br><span class="line">libraries    :=</span><br><span class="line">extra_clean  :=</span><br><span class="line"></span><br><span class="line"><span class="comment"># objects and dependencies are recursive variable because at this</span></span><br><span class="line"><span class="comment"># point in the makefile the sources variable is empty, so they will</span></span><br><span class="line"><span class="comment"># be populated later when the include files are read</span></span><br><span class="line">objects      = <span class="variable">$(<span class="built_in">subst</span> .c,.o,<span class="variable">$(sources)</span>)</span></span><br><span class="line">dependencies = <span class="variable">$(<span class="built_in">subst</span> .c,.d,<span class="variable">$(sources)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># include_dirs is used to avoid duplicated the include dirs</span></span><br><span class="line">include_dirs := lib <span class="keyword">include</span></span><br><span class="line">CPPFLAGS     += <span class="variable">$(<span class="built_in">addprefix</span> -I ,<span class="variable">$(include_dirs)</span>)</span></span><br><span class="line"><span class="keyword">vpath</span> %.h <span class="variable">$(include_dirs)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># see makefile convention post for variable</span></span><br><span class="line">MV  := mv -f</span><br><span class="line">RM  := rm -f</span><br><span class="line">SED := sed</span><br><span class="line"></span><br><span class="line"><span class="comment"># we should set all as the default goal, because in the include file</span></span><br><span class="line"><span class="comment"># there exist targets, but we also should include the module makefile</span></span><br><span class="line"><span class="comment"># first because programs variable is empty(the all target&#x27;s prerequisites</span></span><br><span class="line"><span class="comment"># is varibale programs), so the following code solve the awkward.</span></span><br><span class="line"><span class="section">all:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> lib/codec/module.mk</span><br><span class="line"><span class="keyword">include</span> lib/db/module.mk</span><br><span class="line"><span class="keyword">include</span> lib/ui/module.mk</span><br><span class="line"><span class="keyword">include</span> app/player/module.mk</span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: all</span></span><br><span class="line"><span class="section">all: <span class="variable">$(programs)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: libraries</span></span><br><span class="line"><span class="section">libraries: <span class="variable">$(libraries)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        <span class="variable">$(RM)</span> <span class="variable">$(objects)</span> <span class="variable">$(programs)</span> <span class="variable">$(libraries)</span> \</span><br><span class="line">              <span class="variable">$(dependencies)</span> <span class="variable">$(extra_clean)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ifneq</span> <span class="string">&quot;<span class="variable">$(MAKECMDGOALS)</span>&quot;</span> <span class="string">&quot;clean&quot;</span></span><br><span class="line">  <span class="keyword">include</span> <span class="variable">$(dependencies)</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">%.c %.h: %.y</span><br><span class="line">        $(YACC.y) --defines <span class="variable">$&lt;</span></span><br><span class="line">        <span class="variable">$(MV)</span> y.tab.c <span class="variable">$*</span>.c</span><br><span class="line">        <span class="variable">$(MV)</span> y.tab.h <span class="variable">$*</span>.h</span><br><span class="line"></span><br><span class="line"><span class="comment"># sed command use to add relative path to the dependency, because some tools</span></span><br><span class="line"><span class="comment"># like gcc are not include the relative path to the dependency output</span></span><br><span class="line"><span class="section">%.d: %.c</span></span><br><span class="line">        <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(CPPFLAGS)</span> <span class="variable">$(TARGET_ARCH)</span> -M <span class="variable">$&lt;</span> | \</span><br><span class="line">        <span class="variable">$(SED)</span> &#x27;s,\(<span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$*</span>)</span>\.o\) *:,<span class="variable">$(<span class="built_in">dir</span> <span class="variable">$@</span>)</span>\1 <span class="variable">$@</span>: ,&#x27; &gt; <span class="variable">$@</span>.tmp</span><br><span class="line">        <span class="variable">$(MV)</span> <span class="variable">$@</span>.tmp <span class="variable">$@</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="optimized-top-makefile-for-projects"><a href="#optimized-top-makefile-for-projects" class="headerlink" title="optimized top makefile for projects"></a>optimized top makefile for projects</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># $(call source-to-object, source-file-list)</span></span><br><span class="line">source-to-object = <span class="variable">$(<span class="built_in">subst</span> .c,.o,$(<span class="built_in">filter</span> %.c,$1)</span>) \</span><br><span class="line">                      <span class="variable">$(<span class="built_in">subst</span> .y,.o,$(<span class="built_in">filter</span> %.y,$1)</span>) \</span><br><span class="line">                      <span class="variable">$(<span class="built_in">subst</span> .l,.o,$(<span class="built_in">filter</span> %.l,$1)</span>)</span><br><span class="line"><span class="comment"># $(subdirectory)</span></span><br><span class="line">subdirectory = <span class="variable">$(<span class="built_in">patsubst</span> %/module.mk,%,                      \</span></span><br><span class="line"><span class="variable">                  $(<span class="built_in">word</span>                                         \</span></span><br><span class="line"><span class="variable">                    $(words <span class="variable">$(MAKEFILE_LIST)</span>)</span>,<span class="variable">$(MAKEFILE_LIST)</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># $(call make-library, library-name, source-file-list)</span></span><br><span class="line"><span class="keyword">define</span> make-library</span><br><span class="line"> 	libraries += $1</span><br><span class="line"> 	sources   += $2</span><br><span class="line">	$1: <span class="variable">$(<span class="built_in">call</span> source-to-object,$2)</span></span><br><span class="line">       <span class="variable">$(AR)</span> <span class="variable">$(ARFLAGS)</span> $<span class="variable">$@</span> $<span class="variable">$^</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $(call generated-source, source-file-list)</span></span><br><span class="line">generated-source = <span class="variable">$(<span class="built_in">subst</span> .y,.c,$(<span class="built_in">filter</span> %.y,$1)</span>)      \</span><br><span class="line">                      <span class="variable">$(<span class="built_in">subst</span> .y,.h,$(<span class="built_in">filter</span> %.y,$1)</span>)      \</span><br><span class="line">                      <span class="variable">$(<span class="built_in">subst</span> .l,.c,$(<span class="built_in">filter</span> %.l,$1)</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Collect information from each module in these four variables.</span></span><br><span class="line"><span class="comment"># Initialize them here as simple variables.</span></span><br><span class="line">modules      := lib/codec lib/db lib/ui app/player</span><br><span class="line">programs     :=</span><br><span class="line">libraries    :=</span><br><span class="line">sources      :=</span><br><span class="line"></span><br><span class="line">objects      =  <span class="variable">$(<span class="built_in">call</span> source-to-object,<span class="variable">$(sources)</span>)</span></span><br><span class="line">dependencies =  <span class="variable">$(<span class="built_in">subst</span> .o,.d,<span class="variable">$(objects)</span>)</span></span><br><span class="line"></span><br><span class="line">include_dirs := lib <span class="keyword">include</span></span><br><span class="line">CPPFLAGS     += <span class="variable">$(<span class="built_in">addprefix</span> -I ,<span class="variable">$(include_dirs)</span>)</span></span><br><span class="line"><span class="keyword">vpath</span> %.h <span class="variable">$(include_dirs)</span></span><br><span class="line"></span><br><span class="line">MV  := mv -f</span><br><span class="line">RM  := rm -f</span><br><span class="line">SED := sed</span><br><span class="line"></span><br><span class="line"><span class="section">all:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(<span class="built_in">addsuffix</span> /module.mk,<span class="variable">$(modules)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: all</span></span><br><span class="line"><span class="section">all: <span class="variable">$(programs)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: libraries</span></span><br><span class="line"><span class="section">libraries: <span class="variable">$(libraries)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">        <span class="variable">$(RM)</span> <span class="variable">$(objects)</span> <span class="variable">$(programs)</span> <span class="variable">$(libraries)</span> <span class="variable">$(dependencies)</span>       \</span><br><span class="line">              <span class="variable">$(<span class="built_in">call</span> generated-source, <span class="variable">$(sources)</span>)</span></span><br><span class="line"><span class="keyword">ifneq</span> <span class="string">&quot;<span class="variable">$(MAKECMDGOALS)</span>&quot;</span> <span class="string">&quot;clean&quot;</span></span><br><span class="line">  <span class="keyword">include</span> <span class="variable">$(dependencies)</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line">%.c %.h: %.y</span><br><span class="line">        $(YACC.y) --defines <span class="variable">$&lt;</span></span><br><span class="line">        <span class="variable">$(MV)</span> y.tab.c <span class="variable">$*</span>.c</span><br><span class="line">        <span class="variable">$(MV)</span> y.tab.h <span class="variable">$*</span>.h</span><br><span class="line"><span class="section">%.d: %.c</span></span><br><span class="line">        <span class="variable">$(CC)</span> <span class="variable">$(CFLAGS)</span> <span class="variable">$(CPPFLAGS)</span> <span class="variable">$(TARGET_ARCH)</span> -M <span class="variable">$&lt;</span> | \</span><br><span class="line">        <span class="variable">$(SED)</span> &#x27;s,\(<span class="variable">$(<span class="built_in">notdir</span> <span class="variable">$*</span>)</span>\.o\) *:,<span class="variable">$(<span class="built_in">dir</span> <span class="variable">$@</span>)</span>\1 <span class="variable">$@</span>: ,&#x27; &gt; <span class="variable">$@</span>.tmp</span><br><span class="line">        <span class="variable">$(MV)</span> <span class="variable">$@</span>.tmp <span class="variable">$@</span></span><br></pre></td></tr></table></figure>

<h2 id="optimized-module-mk-makefile-lib-x2F-codec-for-module"><a href="#optimized-module-mk-makefile-lib-x2F-codec-for-module" class="headerlink" title="optimized module.mk makefile(lib&#x2F;codec) for module"></a>optimized module.mk makefile(lib&#x2F;codec) for module</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">	<span class="comment"># $(call make-library, library-name, source-file-list)</span></span><br><span class="line">   <span class="keyword">define</span> make-library</span><br><span class="line">      libraries += $1</span><br><span class="line">      sources   += $2</span><br><span class="line">      $1: <span class="variable">$(<span class="built_in">call</span> source-to-object,$2)</span></span><br><span class="line">          <span class="variable">$(AR)</span> <span class="variable">$(ARFLAGS)</span> $<span class="variable">$@</span> $<span class="variable">$^</span></span><br><span class="line"><span class="keyword">endef</span></span><br><span class="line"></span><br><span class="line">local_src := <span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(subdirectory)</span>/*.c)</span></span><br><span class="line">     <span class="variable">$(<span class="built_in">eval</span> $(<span class="built_in">call</span> make-library, <span class="variable">$(subdirectory)</span>/libcodec.a, <span class="variable">$(local_src)</span>)</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客配置与优化(一)</title>
    <url>/2015/01/2015-1-hexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BC%98%E5%8C%96-%E4%B8%802015-01-01/</url>
    <content><![CDATA[<h3 id="添加统计代码"><a href="#添加统计代码" class="headerlink" title="添加统计代码"></a>添加统计代码</h3><h3 id="设置log"><a href="#设置log" class="headerlink" title="设置log"></a>设置log</h3><h5 id="添加Google与百度统计"><a href="#添加Google与百度统计" class="headerlink" title="添加Google与百度统计"></a>添加Google与百度统计</h5><ol>
<li>在”path&#x2F;yourtheme&#x2F;_config.yml”中添加如下一行:<br><code>baidu_tongji: true</code></li>
</ol>
<span id="more"></span>

<ol start="2">
<li><p>在path&#x2F;yourtheme&#x2F;layout&#x2F;_partial下添加一个baidu-tongji.ejs, 并加入你在百度统计中得到的代码，我的如下所示：<br><img src="/images/2015/baidutongji.png" alt="baidutongji_code"></p>
</li>
<li><p>在你要显示百度统计的地方加入下面一行代码，比如我的是在after-footer.ejs<br><code>&lt;%- partial(&#39;baidu-tongji&#39;) %&gt;</code></p>
</li>
</ol>
<p>以上以百度统计为例，因为Google统计因为墙的原因可能会有某些问题。</p>
<h3 id="提交sitemap"><a href="#提交sitemap" class="headerlink" title="提交sitemap"></a>提交sitemap</h3><p>分别到<a href="https://www.google.com/webmasters/tools/home">Google站长平台</a>和<a href="http://zhanzhang.baidu.com/">百度站长平台</a>根据提示进行相关设置和提交sitemap,等待一段时间后(没研究过具体要多久，反正第二天肯定是可以了)，即可实现站内搜索。</p>
<h3 id="页面圆角设置"><a href="#页面圆角设置" class="headerlink" title="页面圆角设置"></a>页面圆角设置</h3><ol>
<li>站点source_data\variables.styl中添加如下代码：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 圆角设置</span></span><br><span class="line">$border-radius-inner     = 20px 20px 20px 20px;</span><br><span class="line">$border-radius           = 20px;</span><br></pre></td></tr></table></figure></li>
<li>主题配置项custom_file_path中的对应style配置项打开</li>
</ol>
<h3 id="修改markdown中-96-96-的样式"><a href="#修改markdown中-96-96-的样式" class="headerlink" title="修改markdown中&#96;&#96;的样式"></a>修改markdown中&#96;&#96;的样式</h3><ol>
<li><p>站点source_data\styles.styl文件中添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line">code &#123;</span><br><span class="line">    <span class="attr">color</span>: #ff7600;</span><br><span class="line">    <span class="attr">background</span>: #fbf7f8;</span><br><span class="line">    <span class="attr">margin</span>: 2px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 大代码块的自定义样式</span></span><br><span class="line">.<span class="property">highlight</span>, pre &#123;</span><br><span class="line">    <span class="attr">margin</span>: 5px <span class="number">0</span>;</span><br><span class="line">    <span class="attr">padding</span>: 5px;</span><br><span class="line">    border-<span class="attr">radius</span>: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">highlight</span>, code, pre &#123;</span><br><span class="line">    <span class="attr">border</span>: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>主题配置项custom_file_path中的对应style配置项打开</p>
</li>
</ol>
<h3 id="修改底部标签样式"><a href="#修改底部标签样式" class="headerlink" title="修改底部标签样式"></a>修改底部标签样式</h3><p>将文章底部标签 <code>#c/c++ #读书笔记</code> 中的 # 变成 图标<br>将主题配置文件：<code>tag_icon</code> 设为 true</p>
<h3 id="在文章末尾添加“文章结束”标记"><a href="#在文章末尾添加“文章结束”标记" class="headerlink" title="在文章末尾添加“文章结束”标记"></a>在文章末尾添加“文章结束”标记</h3><ol>
<li><p>在<code>themes\next\layout\_macro文件夹中新建passage-end-tag.swig文件</code>, 并添加如下内容：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:14px;&quot;</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-paw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>themes\next\layout\_macro\post.swig</code>中<code>post-body</code>结束后，添加如下内容：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> &#x27;passage-end-tag.swig&#x27; %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改主题配置文件，添加如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="添加动态背景（折线-x2F-线段动态背景）"><a href="#添加动态背景（折线-x2F-线段动态背景）" class="headerlink" title="添加动态背景（折线&#x2F;线段动态背景）"></a>添加动态背景（折线&#x2F;线段动态背景）</h3><p>canvas_next: <a href="https://github.com/theme-next/theme-next-canvas-nest">canvas nest 特效</a></p>
<h3 id="修改文章内超链接样式"><a href="#修改文章内超链接样式" class="headerlink" title="修改文章内超链接样式"></a>修改文章内超链接样式</h3><ol>
<li><p><code>themes\next\source\css\_custom\custom.styl</code></p>
</li>
<li><p>修改文件 themes\next\source\css_common\components\post\post.styl ，在末尾添加如下css样式：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文章内链接文本样式</span></span><br><span class="line">.<span class="property">post</span>-body p a&#123;</span><br><span class="line">  <span class="attr">color</span>: #0593d3;</span><br><span class="line">  border-<span class="attr">bottom</span>: none;</span><br><span class="line">  border-<span class="attr">bottom</span>: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attr">color</span>: #fc6423;</span><br><span class="line">    border-<span class="attr">bottom</span>: none;</span><br><span class="line">    border-<span class="attr">bottom</span>: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中选择.post-body 是为了不影响标题，选择p 是为了不影响首页阅读全文的显示样式,颜色可以自己定义</p>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo博客</title>
    <url>/2015/01/2015-1-%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2-2015-01-01/</url>
    <content><![CDATA[<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ol>
<li><p>安装hexo<br>  首先如果没有安装<strong>Node.js</strong>和<strong>Git</strong>, 则要先安装这两个<br>  <code>npm install -g hexo-cli</code></p>
</li>
<li><p>hexo的更新<br>  <code>npm update -g</code> (好像得重新按照1中的命令重新安装hexo)</p>
</li>
</ol>
<h3 id="创建本地博客"><a href="#创建本地博客" class="headerlink" title="创建本地博客"></a>创建本地博客</h3><ol>
<li><p>初始化博客<br>  在你想建立博客的文件夹下执行<code>hexo init</code></p>
</li>
<li><p>选择主题<br>  选择自己喜欢的主题, 一般从github上clone到theme文件夹下; 然后根据主题的wiki进行配置</p>
<span id="more"></span></li>
</ol>
<h3 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h3><ol>
<li><p>本地预览<br>  <code>hexo server</code> 在网页<a href="http://localhost/4000%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88">http://localhost/4000可以进行本地预览</a></p>
</li>
<li><p>部署<br>  配置站点配置文件, 然后<code>hexo generate</code>, <code>hexo deploy</code></p>
</li>
</ol>
<h3 id="设置next主题本地搜索引擎"><a href="#设置next主题本地搜索引擎" class="headerlink" title="设置next主题本地搜索引擎"></a>设置next主题本地搜索引擎</h3><ol>
<li>安装searchdb插件<br>  <code>npm install hexo-generator-searchdb --save</code></li>
</ol>
<h3 id="设置rss"><a href="#设置rss" class="headerlink" title="设置rss"></a>设置rss</h3><ol>
<li><p>安装feed插件<br>  <code>npm install hexo-generator-feed --save</code></p>
</li>
<li><p>站点配置文件<br>  加入以下feed配置:</p>
<blockquote>
<p>feed:<br>  type: atom<br>  path: atom.xml<br>  limit: 20</p>
</blockquote>
</li>
<li><p>主题配置文件<br>  以next主题为例:</p>
</li>
</ol>
<blockquote>
<p>rss: &#x2F;atom.xml</p>
</blockquote>
<h3 id="设置sitemap"><a href="#设置sitemap" class="headerlink" title="设置sitemap"></a>设置sitemap</h3><ol>
<li><p>安装sitemap插件<br>  <code>npm install hexo-generator-sitemap --save</code></p>
</li>
<li><p>站点配置文件<br>  加入以下sitemap配置:</p>
  <figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">plugins</span><span class="punctuation">:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br></pre></td></tr></table></figure></li>
<li><p>可以在<code>localhost:4000/sitemap.xml</code>看到网站的sitemap</p>
</li>
<li><p>然后提交到你网站所用的搜索引擎上, 如swiftype, google, baidu等</p>
<blockquote>
<p>以google为例:<br>  (<a href="https://www.google.com/webmasters/tools/home?hl=en">google站点管理</a>)<br>  <img src="/images/2015/add_google_sitemap.png" alt="sitemap_google"></p>
</blockquote>
</li>
<li><p>swiftype设置<br><a href="http://blog.swiftype.com/sitemap-xml-support-for-swiftype/">swiftype support sitemap.xml</a><br>  它根据Robots.txt来读取sitemap<br><a href="https://www.npmjs.com/package/hexo-generator-robotstxt">robotstxt插件的安装与配置</a></p>
</li>
</ol>
<h3 id="vps上配置hexo博客"><a href="#vps上配置hexo博客" class="headerlink" title="vps上配置hexo博客"></a>vps上配置hexo博客</h3><ol>
<li><p>安装nginx<br><code>yum install nginx</code></p>
</li>
<li><p>防火墙允许http&#x2F;https服务<br><code>firewall-cmd --permanent --zone=public --add-service=http</code><br><code>firewall-cmd --permanent --zone=public --add-service=https</code></p>
</li>
<li><p>设置网站目录<br>设置location下的root为hexo生成的public文件夹</p>
<blockquote>
<p>如果出现403forbidden, 可能是权限问题, nginx.conf第一行<br>user nobody 改为 user root</p>
</blockquote>
</li>
<li><p>绑定域名 &amp; 设置https<br><code>server_name</code> 字段改为你的域名</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># included <span class="keyword">in</span> http brace</span><br><span class="line"># http setting</span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  wengqiang.<span class="property">site</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /root/wens07.<span class="property">github</span>.<span class="property">io</span>/public;</span><br><span class="line">        index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// http request turn to htpps</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">301</span> <span class="attr">https</span>:<span class="comment">//$host$request_uri;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># https setting</span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">443</span> ssl;</span><br><span class="line">    server_name  wengqiang.<span class="property">site</span>;</span><br><span class="line"></span><br><span class="line">    ssl_certificate      /root/wengqiang.<span class="property">site</span>.<span class="property">cert</span>/<span class="title class_">Nginx</span>/1_wengqiang.<span class="property">site_bundle</span>.<span class="property">crt</span>;</span><br><span class="line">    ssl_certificate_key  /root/wengqiang.<span class="property">site</span>.<span class="property">cert</span>/<span class="title class_">Nginx</span>/2_wengqiang.<span class="property">site</span>.<span class="property">key</span>;</span><br><span class="line"></span><br><span class="line">    ssl_session_cache    <span class="attr">shared</span>:<span class="attr">SSL</span>:1m;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    ssl_ciphers  <span class="attr">HIGH</span>:!<span class="attr">aNULL</span>:!<span class="title class_">MD5</span>;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /root/wens07.<span class="property">github</span>.<span class="property">io</span>/public;</span><br><span class="line">        index  index.<span class="property">html</span> index.<span class="property">htm</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="安装waline评论系统"><a href="#安装waline评论系统" class="headerlink" title="安装waline评论系统"></a>安装waline评论系统</h3><ol>
<li>根据waline官网操作部署好waline服务端(<a href="https://vercel.com/wens07">https://vercel.com/wens07</a>)</li>
<li>hexo安装插件支持<br><code>sudo npm install @waline/hexo-next</code><br></li>
<li>config.yml对waline进行配置</li>
<li>进入waline的后台管理进行注册,第一个注册即为管理员 <a href="https://waline.wengqiang.site/ui/register">https://waline.wengqiang.site/ui/register</a></li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Manacher&#39;s algorithm</title>
    <url>/2015/12/Manacher-s-algorithm2015-12-17/</url>
    <content><![CDATA[<blockquote>
<p>if  p[i’] &lt;&#x3D; R - i; then p[i] &#x3D; p[i’]<br>  else p[i] &gt;&#x3D; R -i (which we should expand i (the center) past the rigth edge to get it)</p>
</blockquote>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>c/cpp IO</title>
    <url>/2015/12/c-cpp-IO2015-12-10/</url>
    <content><![CDATA[<h3 id="c中读取输出"><a href="#c中读取输出" class="headerlink" title="c中读取输出"></a>c中读取输出</h3><ol>
<li><p>单个字符<br> <code>int fgetc( FILE *stream );</code><br> <code>int fputc( int ch, FILE *stream );</code></p>
<p> <code>int ungetc( int ch, FILE *stream );</code></p>
<p> <code>​int scanf( const char* format, ... )</code><br> <code>int fscanf( std::FILE* stream, const char* format, ... )</code><br> <code>int sscanf( const char* buffer, const char* format, ... )</code><br> 返回读取的参数的数量， or EOF<br> The conversion specifiers that do not consume leading whitespace: %c、%[、%n</p>
</li>
</ol>
<span id="more"></span>
<ol start="2">
<li><p>一串字符<br> <code>char *fgets( char *restrict str, int count, FILE *restrict stream );</code><br>读取count-1个字符(一个用于存储’\0’__ null-terminated), parse stop when end-of-file or a newline found;  <strong>it contain the newline character</strong><br>if success: return str;  if error: return NULL</p>
<p> <code>int fputs( const char *restrict str, FILE *restrict stream );</code></p>
</li>
<li><p>unix最大打开文件数<br> <code>#define	FOPEN_MAX	20	/* must be &lt;= OPEN_MAX &lt;sys/syslimits.h&gt; */</code></p>
</li>
</ol>
<h3 id="c-中读取输出"><a href="#c-中读取输出" class="headerlink" title="c++中读取输出"></a>c++中读取输出</h3><ol>
<li><p>一串字符<br> <code>std::basic_istream&lt;CharT,Traits&gt;&amp; std::getline(std::basic_istream&lt;CharT,Traits&gt;&amp; input, std::basic_string&lt;CharT,Traits,Allocator&gt;&amp; str, CharT delim )</code><br>  读取字符存到str, parse stop when end-of-file or delim found; <strong>extract the delim character, but not contain  the delim character</strong></p>
</li>
<li><p>单个字符<br> <code>char c; cin &gt;&gt; c</code><br> <code>cin.ignore(ignore_num, delim)</code>  Extracts and discards characters from the input stream until and including delim</p>
</li>
<li><p>cin mixed with getline</p>
<blockquote>
<blockquote>
<p>input:<br>2<br>request&#x3D;10<br>release&#x3D;20</p>
</blockquote>
</blockquote>
</li>
</ol>
<p>when used cin &gt;&gt; n, then getline(cin, str), because of getline will not consume the delimter left by cin</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cin &gt;&gt; n</span><br><span class="line">- cin &gt;&gt; std::ws <span class="comment">//removing left whitespace</span></span><br><span class="line">- cin.<span class="built_in">ignore</span>(std::numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), <span class="string">&#x27;\n&#x27;</span>) <span class="comment">//ingore all left over characters on the line</span></span><br><span class="line">- <span class="built_in">getline</span>(cin, notusestr); <span class="comment">// explicit remove the newline charactor</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令学习</title>
    <url>/2015/12/git%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A02015-12-18/</url>
    <content><![CDATA[<h1 id="git帮助"><a href="#git帮助" class="headerlink" title="git帮助"></a>git帮助</h1><p><code>git help [command]</code></p>
<h1 id="本地创建repository-推送到远端"><a href="#本地创建repository-推送到远端" class="headerlink" title="本地创建repository, 推送到远端"></a>本地创建repository, 推送到远端</h1><ol>
<li><p><code>git init</code></p>
</li>
<li><p><code>git remote add [remote repository name]  [remote repository url]</code><br> git remote add origin <a href="https://github.com/BlockLink/blocklink_crosschain_privatekey.git">https://github.com/BlockLink/blocklink_crosschain_privatekey.git</a></p>
</li>
<li><p><code>git push -u [remote repository name]  [remote branch name]</code><br> git push -u origin master</p>
</li>
</ol>
<h1 id="分支相关"><a href="#分支相关" class="headerlink" title="分支相关"></a>分支相关</h1><h3 id="跳转分支"><a href="#跳转分支" class="headerlink" title="跳转分支"></a>跳转分支</h3><p><code>git checkout &lt;branch&gt;</code></p>
<blockquote>
<p>跳转到<branch>分支:将HEAD指向<branch>, 并 更新index和文件.</p>
</blockquote>
<h3 id="创建本地分支并且推送到远端"><a href="#创建本地分支并且推送到远端" class="headerlink" title="创建本地分支并且推送到远端"></a>创建本地分支并且推送到远端</h3><ol>
<li><p>创建本地分支<br><code>git checkout -b [branch_name]</code></p>
</li>
<li><p>推送到远端<br><code>git push &lt;remote_repository_path&gt; &lt;branch_name&gt;[:&lt;remote_branch_name&gt;]</code></p>
</li>
<li><p>设置跟踪分支<br><code>git branch -u &lt;remote_repository_path/remote_branch_name&gt;</code></p>
</li>
</ol>
<h3 id="设置跟踪分支"><a href="#设置跟踪分支" class="headerlink" title="设置跟踪分支"></a>设置跟踪分支</h3><p><code>git checkout [-b [branch]] [--track] &lt;remotename&gt;/&lt;branch&gt;</code></p>
<blockquote>
<p><em>用于对未创建的分支建立跟踪分支</em>; 并且跳转到<branch>分支上.</p>
</blockquote>
<p><code>git branch -u &lt;remotename&gt;/&lt;branch&gt;</code> or<br><code> git branch --set-upstream-to=origin/&lt;branch&gt; &lt;localbranch&gt;</code></p>
<blockquote>
<p>为当前所在的分支创建跟踪分支</p>
</blockquote>
<p>一般如果你直接通过clone命令拉取一个仓库, 则git会自动设置一个本地master到origin&#x2F;master的跟踪<br>分支.<br><code>* master 3cf359f [origin/master] Site updated: 2015-12-18 11:55:19</code></p>
<span id="more"></span>

<h3 id="查看本地的所有跟踪分支情况"><a href="#查看本地的所有跟踪分支情况" class="headerlink" title="查看本地的所有跟踪分支情况"></a>查看本地的所有跟踪分支情况</h3><p><code>git branch -vv</code><br><code>git branch [--list]</code> #列出本地的分支<br><code>git branch [--list] -r </code>  #列出repository上的分支情况</p>
<h3 id="删除本地分支或远程分支"><a href="#删除本地分支或远程分支" class="headerlink" title="删除本地分支或远程分支"></a>删除本地分支或远程分支</h3><ol>
<li><p>本地分支<br><code>git branch -D/--delete [branchname]</code></p>
</li>
<li><p>远程分支<br><code>git push origin --delete [branchname]</code><br>or<br><code>git push &lt;remote_name&gt; :&lt;branch_name&gt;</code></p>
<blockquote>
<p>基本上这个命令做的只是从服务器上移除这个指针。 Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的</p>
</blockquote>
</li>
</ol>
<h3 id="查看-x2F-设置远程repository"><a href="#查看-x2F-设置远程repository" class="headerlink" title="查看&#x2F;设置远程repository"></a>查看&#x2F;设置远程repository</h3><ol>
<li><code>git config --list</code>  #可以查看到当前本地对应的远程仓库</li>
<li><code>git remote add  [remote_repository_name] [remote_repository_path]</code></li>
</ol>
<h3 id="设置tag"><a href="#设置tag" class="headerlink" title="设置tag"></a>设置tag</h3><ol>
<li><code>git tag [tagname]</code>      创建一个tag</li>
<li><code>git tag -d [tagname]</code>   删除一个tag</li>
<li><code>git checkout [tagname]</code> 更新到tag的状态<br></li>
</ol>
<h1 id="submodule相关"><a href="#submodule相关" class="headerlink" title="submodule相关"></a>submodule相关</h1><h3 id="add-submodule-to-a-repository"><a href="#add-submodule-to-a-repository" class="headerlink" title="add submodule to a repository"></a>add submodule to a repository</h3><p><code>git submodule add [-b branch_name] [git repository url] [the path to put the submodule]</code></p>
<h3 id="update-submodule"><a href="#update-submodule" class="headerlink" title="update submodule"></a>update submodule</h3><p><code>git submodule update --init --recursive</code> 第一次init并更新<br><code>git submodule update [--remote]</code> 更新submodule<br><code>git submodule set-branch [-b branch_name] submoule_path</code> 更新submoule_path上的submodule的branch 或者 直接更改.gitmodules添加branch配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[submodule &quot;src/xtopcom/xvm&quot;]</span><br><span class="line">	path = src/xtopcom/xvm</span><br><span class="line">	url = git@github.com:telosprotocol/xvm.git</span><br><span class="line">	branch = dev/featute_new_contract</span><br><span class="line">[submodule &quot;src/xtopcom/xdepends&quot;]</span><br><span class="line">	path = src/xtopcom/xdepends</span><br><span class="line">	url = git@github.com:telosprotocol/xdepends.git</span><br><span class="line">[submodule &quot;src/xtopcom/xbase&quot;]</span><br><span class="line">	path = src/xtopcom/xbase</span><br><span class="line">	url = git@github.com:telosprotocol/xbase.git</span><br></pre></td></tr></table></figure>

<h3 id="rm-submodule"><a href="#rm-submodule" class="headerlink" title="rm submodule"></a>rm submodule</h3><ol>
<li>删除.gitmodules中该submodule相关的行</li>
<li>删除.git&#x2F;config中该submodule相关的行</li>
<li>删除该submodule的路径<br><code>git rm --cached [the path to put the submodule]</code><br>can not put a trailing slash as the command will fail.</li>
</ol>
<h1 id="历史或状态"><a href="#历史或状态" class="headerlink" title="历史或状态"></a>历史或状态</h1><h3 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h3><ol>
<li><code> git log --graph --pretty=oneline --abbrev-commit</code></li>
<li><code>git log --graph --pretty=format:&quot;%h%x09%an%x09%ad%x09%s&quot; --abbrev-commit</code><br>%h &#x3D; abbreviated commit hash<br>%x09 &#x3D; tab (character for code 9)<br>%an &#x3D; author name<br>%ad &#x3D; author date (format respects –date&#x3D; option)<br>%s &#x3D; subject</li>
</ol>
<h3 id="查看commit-id"><a href="#查看commit-id" class="headerlink" title="查看commit id"></a>查看commit id</h3><ol>
<li><code>git rev-parse HEAD</code></li>
</ol>
<h1 id="git处理文件中line-ending"><a href="#git处理文件中line-ending" class="headerlink" title="git处理文件中line ending"></a>git处理文件中line ending</h1><p><code>git config core.autocrlf</code><br>会输出三种值: true, false, input</p>
<ol>
<li>true: turn all CRLF line ending to LF</li>
<li>false: no line ending conversation will performed</li>
</ol>
<p>设置成你需要的值<br><code>git config core.autocrlf [true/false/input]</code></p>
<h1 id="设置git配置"><a href="#设置git配置" class="headerlink" title="设置git配置"></a>设置git配置</h1><ol>
<li><p>设置用户名(默认为local)<br><code>git config [--global/--local/--system] user.name   &quot;your user name&quot;</code></p>
</li>
<li><p>设置密码(现在windows中credential.helper默认为manager, 是以前wincred的替代品)<br><code>git config [--global/--local] credential.helper  store</code><br><code>git config [--global/--local] credential.helper  cache</code></p>
</li>
</ol>
<h1 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h1><h3 id="撤销本地的commit记录"><a href="#撤销本地的commit记录" class="headerlink" title="撤销本地的commit记录"></a>撤销本地的commit记录</h3><ol>
<li>git reset [–mixed|–soft|–hard] HEAD<del>[num]|commit-id<br>(</del>在windows系统，^在linux系统)(back num commits)</li>
</ol>
<ul>
<li>Mixed - the default strategy. When this option is selected, the index is reset while the working tree is not, which means that changed files are preserved but not marked for commit. You are presented with a report of what has not been updated.</li>
<li>Soft - when this option is selected, the index and the working tree are not affected, only the HEAD pointer is moved to the specified commit. Your current state with any changes remains different from the commit you are switching to. All the changes are “staged” for committing.</li>
<li>Hard - when this option is selected, both the working directory and the index are changed to the specified commit.</li>
</ul>
<h3 id="撤销push后的commit记录"><a href="#撤销push后的commit记录" class="headerlink" title="撤销push后的commit记录"></a>撤销push后的commit记录</h3><ol>
<li>撤销本地的commit记录</li>
<li><code>git push --force</code> 强制提交</li>
</ol>
<h1 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h1><ol>
<li><p>针对所有的URL</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> http<span class="selector-class">.proxy</span>  socks5:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line"><span class="selector-id">#git</span> config <span class="attr">--global</span> https<span class="selector-class">.proxy</span> socks5:<span class="comment">//127.0.0.1:1080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> http<span class="selector-class">.proxy</span></span><br><span class="line"><span class="selector-id">#git</span> config <span class="attr">--global</span> <span class="attr">--unset</span> https<span class="selector-class">.proxy</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>针对某个url</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> http<span class="selector-class">.https</span>:<span class="comment">//github.com.proxy  socks5://127.0.0.1:1080</span></span><br><span class="line"><span class="selector-id">#git</span> config <span class="attr">--global</span> https<span class="selector-class">.https</span>:<span class="comment">//github.com.proxy socks5://127.0.0.1:1080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> http<span class="selector-class">.proxy</span></span><br><span class="line">git config <span class="attr">--global</span> <span class="attr">--unset</span> http<span class="selector-class">.https</span>:<span class="comment">//github.com.proxy</span></span><br><span class="line"><span class="selector-id">#git</span> config <span class="attr">--global</span> <span class="attr">--unset</span> https<span class="selector-class">.proxy</span></span><br><span class="line"></span><br><span class="line">git config <span class="attr">--global</span> <span class="attr">--get</span> http<span class="selector-class">.proxy</span></span><br><span class="line"><span class="selector-id">#git</span> config <span class="attr">--global</span> <span class="attr">--get</span> https.proxy</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="修改commit信息或作者信息"><a href="#修改commit信息或作者信息" class="headerlink" title="修改commit信息或作者信息"></a>修改commit信息或作者信息</h3><ol>
<li><p>最近的一条commit记录<br><code>git commit --amend [--reset-author]</code></p>
</li>
<li><p>任意的某条记录<br><code>git rebase -i HEAD~N</code>  –N表示倒数第几条commit信息<br><code>git commit --amend [--reset-author]</code><br><code>git rebase --continue</code></p>
</li>
</ol>
<h3 id="删除untracked-files"><a href="#删除untracked-files" class="headerlink" title="删除untracked files"></a>删除untracked files</h3><ol>
<li><code>git clean -n</code> –remove untracked files from the working tree</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>有用的公式</title>
    <url>/2015/12/%E6%9C%89%E7%94%A8%E7%9A%84%E5%85%AC%E5%BC%8F2015-12-10/</url>
    <content><![CDATA[<h3 id="温度表示法互相转换"><a href="#温度表示法互相转换" class="headerlink" title="温度表示法互相转换"></a>温度表示法互相转换</h3><p>C &#x3D; (5&#x2F;9)(F - 32)</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>formula</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithms</title>
    <url>/2015/02/2015-2-2015-02-02-algorithms/</url>
    <content><![CDATA[<h2 id="Divide-and-Conquer-Main-Thoery"><a href="#Divide-and-Conquer-Main-Thoery" class="headerlink" title="Divide and Conquer(Main Thoery)"></a>Divide and Conquer(Main Thoery)</h2><p>if a&gt;&#x3D;1 and b &gt; 1, T(n) &#x3D; aT(n&#x2F;b) + f(n)</p>
<ol>
<li><p>case 1<br>$$<br> f(n) &#x3D; O(n^{\log_b{a-\epsilon}}) \longrightarrow T(n) &#x3D; \Theta(n^{\log_ba})<br>$$</p>
</li>
<li><p>case 2<br>$$<br> f(n) &#x3D; \Theta(n^{\log_ba}) \longrightarrow T(n) &#x3D; \Theta(n^{\log_ba}\lg n)<br>$$</p>
<span id="more"></span></li>
<li><p>case 3<br>$$<br> f(n) &#x3D; \Omega(n^{\log_b{a+\epsilon}}) \longrightarrow T(n) &#x3D; \Theta{f(n)})<br>$$</p>
</li>
</ol>
<h2 id="Fibonacci-数列近似值"><a href="#Fibonacci-数列近似值" class="headerlink" title="Fibonacci 数列近似值"></a>Fibonacci 数列近似值</h2><p>$$<br>    f(n) \approx 2^{0.694n} \approx (1.6)^{n}<br>$$</p>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>understand IDE basis/shortcuts</title>
    <url>/2015/02/2015-2-2015-02-03-understand-IDE-basis-shortcuts/</url>
    <content><![CDATA[<h1 id="key-binding"><a href="#key-binding" class="headerlink" title="key binding"></a>key binding</h1><ol>
<li><p>go to source: shift + cmd + s(cmd + click)<br>go to declaration: shift + cmd + d</p>
</li>
<li><p>edit history previous item: ctrl + cmd + left-arrow<br>edit history next item: ctrl + cmd + right-arrow</p>
</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>xcode IDE basis/shortcuts</title>
    <url>/2015/02/2015-2-2015-02-03-xcode-IDE-basis-shortcuts/</url>
    <content><![CDATA[<h5 id="ctrl-command-方向键"><a href="#ctrl-command-方向键" class="headerlink" title="ctrl + command + 方向键"></a>ctrl + command + 方向键</h5><p> 看完帮助等后进行返回</p>
<h5 id="ctrl-command-？（shift-？）"><a href="#ctrl-command-？（shift-？）" class="headerlink" title="ctrl + command + ？（shift + ？）"></a>ctrl + command + ？（shift + ？）</h5><p> 打开选中项的帮助文档</p>
<h5 id="command-delete"><a href="#command-delete" class="headerlink" title="command + delete"></a>command + delete</h5><p> delete to beginning of the line</p>
<span id="more"></span>

<h5 id="option-command-delete"><a href="#option-command-delete" class="headerlink" title="option + command + delete"></a>option + command + delete</h5><p> delete to end of the line</p>
<h5 id="command-方向键"><a href="#command-方向键" class="headerlink" title="command + 方向键"></a>command + 方向键</h5><p> move to end&#x2F;beginning of the line</p>
<h5 id="by-ccomment-plugin"><a href="#by-ccomment-plugin" class="headerlink" title="by ccomment plugin"></a>by ccomment plugin</h5><p>  <strong>ctrl + cmd + &#x2F;</strong><br> produce  &#x2F;* ~ &#x2F; c-style comment</p>
<h5 id="by-vvdocument-plugin"><a href="#by-vvdocument-plugin" class="headerlink" title="by vvdocument plugin"></a>by vvdocument plugin</h5><p><strong>&#x2F;&#x2F;&#x2F;</strong> shortcut key to get the document comment</p>
<p> plugin location:<code>/Users/wens/Library/Application Support/Developer/Shared/Xcode/Plug-ins</code></p>
<h5 id="create-custom-c-file-template"><a href="#create-custom-c-file-template" class="headerlink" title="create custom c++ file template"></a>create custom c++ file template</h5><p> <code>/Applications/Xcode.app/Contents/Developer/Library/Xcode/Templates/File Templates/C and C++/</code></p>
<h5 id="code-snippet"><a href="#code-snippet" class="headerlink" title="code snippet"></a>code snippet</h5><p> <code>&lt;#theplaceholder#&gt;</code></p>
<h5 id="move-between-in-tabs"><a href="#move-between-in-tabs" class="headerlink" title="move between in tabs"></a>move between in tabs</h5><p>cmd + }</p>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>快捷键</title>
    <url>/2015/05/2015-5-%E5%BF%AB%E6%8D%B7%E9%94%AE2015-05-30/</url>
    <content><![CDATA[<h3 id="标签页跳转"><a href="#标签页跳转" class="headerlink" title="标签页跳转"></a>标签页跳转</h3><p><code>shift + cmd + ]</code></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>shortkey</tag>
      </tags>
  </entry>
  <entry>
    <title>android phone</title>
    <url>/2015/06/2015-6-android-phone2015-06-02/</url>
    <content><![CDATA[<h3 id="更改-x2F-添加or删除系统文件"><a href="#更改-x2F-添加or删除系统文件" class="headerlink" title="更改&#x2F;添加or删除系统文件"></a>更改&#x2F;添加or删除系统文件</h3><ol>
<li><p>usb连接手机到电脑上<br><code>adb devices</code></p>
</li>
<li><p>取得root权限<br><code>adb root</code></p>
</li>
<li><p>重新挂载<br><code>adb remount</code></p>
</li>
<li><p>进行添加or删除<br><code>adb pull/push xxxx</code></p>
</li>
</ol>
<span id="more"></span>

<h3 id="在手机内部上操作"><a href="#在手机内部上操作" class="headerlink" title="在手机内部上操作"></a>在手机内部上操作</h3><ol>
<li><p>进入到手机内部<br><code>adb shell</code></p>
</li>
<li><p>使用pm&#x2F;am管理安装包和程序的活动<br><code>pm install/uninstall</code><br><code>am</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>c/cpp-faqs</title>
    <url>/2015/06/2015-6-c-cpp-faqs2015-06-15/</url>
    <content><![CDATA[<h3 id="linkages-in-function-and-object"><a href="#linkages-in-function-and-object" class="headerlink" title="linkages in function and object"></a>linkages in function and object</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* object */</span>	  <span class="comment">/* function */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> o1;		  <span class="function"><span class="built_in">int</span> <span class="title">f1</span>()</span>;		<span class="comment">/* external linkage */</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> o2;	  <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">f2</span>()</span>;	<span class="comment">/* internal linkage */</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> o3;	  <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">f3</span>()</span>;	<span class="comment">/* internal linkage */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">int</span> o1;	  <span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">f1</span>()</span>;	<span class="comment">/* ERROR, both have external linkage */</span></span><br><span class="line"><span class="built_in">int</span> o2;					<span class="comment">/* ERROR, o2 has internal linkage */</span></span><br><span class="line">		  <span class="function"><span class="built_in">int</span> <span class="title">f2</span>()</span>;		<span class="comment">/* OK, picks up internal linkage */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">int</span> o3;	  <span class="function"><span class="keyword">extern</span> <span class="built_in">int</span> <span class="title">f3</span>()</span>;	<span class="comment">/* OK, both pick up internal linkage */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>The difference is case (2); where functions do pick up a previous linkage even without “extern”, objects don’t.</p>
<h3 id="extern-mean-in-a-function-declaration"><a href="#extern-mean-in-a-function-declaration" class="headerlink" title="extern mean in a function declaration"></a>extern mean in a function declaration</h3><p>extern is significant only with data declarations. In function declarations, it can be used as a stylistic hint to indicate that the function’s definition is probably in another source file, but there is no formal difference between</p>
<p><code>extern int f();</code> and <code>int f()</code>;</p>
<h3 id="What’s-the-difference-between-these-two-declarations"><a href="#What’s-the-difference-between-these-two-declarations" class="headerlink" title="What’s the difference between these two declarations?"></a>What’s the difference between these two declarations?</h3><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="type">x1</span> &#123; ... &#125;;</span><br><span class="line">typedef <span class="keyword">struct</span> &#123; ... &#125; x2;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>The first form declares a <strong>structure tag</strong>; the second declares a <strong>typedef</strong>. The main difference is that the second declaration is of a slightly more abstract type–its users don’t necessarily know that it is a structure, and the keyword struct is not used when declaring instances of it:</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">x2 b<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>Structures declared with tags, on the other hand, must be defined with the</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="type">x1</span> a;</span><br></pre></td></tr></table></figure>
<h3 id="What-is-the-difference-between-these-initializations"><a href="#What-is-the-difference-between-these-initializations" class="headerlink" title="What is the difference between these initializations?"></a>What is the difference between these initializations?</h3><p><code>char a[] = &quot;string literal&quot;;</code><br><code>char *p  = &quot;string literal&quot;;</code></p>
<p>A string literal (the formal term for a double-quoted string in C source) can be used in two slightly different ways:</p>
<ol>
<li>As the initializer for an array of char, as in the declaration of char a[] , it specifies the initial values of the characters in that array (and, if necessary, its size).</li>
<li>Anywhere else, it turns into an unnamed, static array of characters, and this unnamed array may be stored in read-only memory, and which therefore cannot necessarily be modified. In an expression context, the array is converted at once to a pointer, as usual (see section 6), so the second declaration initializes p to point to the unnamed array’s first element.</li>
</ol>
<p>Some compilers have a switch controlling whether string literals are writable or not (for compiling old code), and some may have options to cause string literals to be formally treated as arrays of const char (for better error catching).</p>
<h3 id="array-是数组-则array-和-amp-array-的区别"><a href="#array-是数组-则array-和-amp-array-的区别" class="headerlink" title="array 是数组,  则array 和 &amp;array 的区别"></a>array 是数组,  则array 和 &amp;array 的区别</h3><p>区别在于类型<br>    在标准c中, &amp;array生成一个”T型数组”的指针,指向整个数组. 对于数组的简单引用则生成一个T型的指针,指向数组的第一个元素.</p>
<p><code>int a[10]</code><br>对a的引用类型是”int型的指针”, 而&amp;a是”10个int的数组的指针”.</p>
<p><code>int array[row][col]</code><br>对array的引用类型是”col个int的数组的指针”, 而&amp;array的类型是”row个col个int的数组的数组的指针”.</p>
<h3 id="无符号规则-unsigned-preserving-和值规则-value-preserving"><a href="#无符号规则-unsigned-preserving-和值规则-value-preserving" class="headerlink" title="无符号规则(unsigned preserving)和值规则(value preserving)"></a>无符号规则(unsigned preserving)和值规则(value preserving)</h3><ol>
<li><p>“unsigned preserving,” is used: when an unsigned type needs to be widened, it is widened to an unsigned type; when an unsigned type mixes with a signed type, the result is an unsigned type.</p>
</li>
<li><p>The other rule, specified by ISO C, is known as “value preserving,” in which the result type depends on the relative sizes of the operand types. When an unsigned char or unsigned short is widened, the result type is int if an int is large enough to represent all the values of the smaller type. Otherwise, the result type is unsigned int. The value preserving rule produces the least surprise arithmetic result for most expressions.</p>
</li>
</ol>
<p>Compilation Behavior:<br>Only in the transition or ISO modes (-Xt or -Xs) does the ISO C compiler use the unsigned preserving promotions; in the other two modes, conforming (–Xc) and ISO (–Xa), the value preserving promotion rules are used.</p>
<h3 id="int-main-vs-int-main-void"><a href="#int-main-vs-int-main-void" class="headerlink" title="int main() vs int main(void)"></a>int main() vs int main(void)</h3><ol>
<li>在c++中两种方式都表示声明一个函数, 它没有参数; 一样的</li>
<li>在c中, int main(void) 在c11标准中定义, 表示函数没有参数</li>
</ol>
<h3 id="members-can-initialize-in-class-declaration"><a href="#members-can-initialize-in-class-declaration" class="headerlink" title="members can initialize in class declaration"></a>members can initialize in class declaration</h3><blockquote>
<p>in c++11 <em>non-static</em> data members, <em>static constexpr</em> data members, and <em>static const data members of integral or enumeration type</em> may be initialized in the class declaration. e.g.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">X</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">5</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> f=<span class="number">3.12f</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> j=<span class="number">42</span>;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">float</span> g=<span class="number">9.5f</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h3 id="c-中继承的相关问题"><a href="#c-中继承的相关问题" class="headerlink" title="c++中继承的相关问题"></a>c++中继承的相关问题</h3><ol>
<li>在public inheritance中<blockquote>
<p> hide an inherited public: member function is evil</p>
</blockquote>
</li>
</ol>
<h3 id="delete-一个指针"><a href="#delete-一个指针" class="headerlink" title="delete 一个指针"></a>delete 一个指针</h3><ol>
<li>当一个指针是NULL时, delete p是安全的</li>
<li>delete p twice, it is a disaster.</li>
</ol>
<h3 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h3><ol>
<li>“M &amp; M rule”: for a member variable, the mutable and mutex(or atomic) go together.</li>
<li>to the compiler, the function signature is same whether you include const in front of a value parameter or not.</li>
</ol>
<h3 id="显示gcc-x2F-g-预定义变量的区别"><a href="#显示gcc-x2F-g-预定义变量的区别" class="headerlink" title="显示gcc&#x2F;g++ 预定义变量的区别"></a>显示gcc&#x2F;g++ 预定义变量的区别</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[<span class="number">16</span>:<span class="number">13</span>:<span class="number">41</span> <span class="number">0</span> ~] $ g++ -E -dM -std=c++<span class="number">0</span>x -x c++ /dev/null &gt;b</span><br><span class="line">[<span class="number">16</span>:<span class="number">13</span>:<span class="number">44</span> <span class="number">0</span> ~] $ g++ -E -dM -std=c++<span class="number">98</span> -x c++ /dev/null &gt;a</span><br><span class="line">[<span class="number">16</span>:<span class="number">13</span>:<span class="number">50</span> <span class="number">0</span> ~] $ diff -u a b</span><br><span class="line">--- a   <span class="number">2010</span><span class="number">-06</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">50.200787591</span> +<span class="number">0200</span></span><br><span class="line">+++ b   <span class="number">2010</span><span class="number">-06</span><span class="number">-02</span> <span class="number">16</span>:<span class="number">13</span>:<span class="number">44.456912378</span> +<span class="number">0200</span></span><br><span class="line">@@ <span class="number">-20</span>,<span class="number">6</span> +<span class="number">20</span>,<span class="number">7</span> @@</span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> __linux 1</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> __DEC32_EPSILON__ 1E-6DF</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> __unix 1</span></span><br><span class="line">+<span class="meta">#<span class="keyword">define</span> __GXX_EXPERIMENTAL_CXX0X__ 1</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> __LDBL_MAX_EXP__ 16384</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> __linux__ 1</span></span><br><span class="line"> <span class="meta">#<span class="keyword">define</span> __SCHAR_MAX__ 127</span></span><br></pre></td></tr></table></figure>

<h3 id="c-ctor-and-dtor"><a href="#c-ctor-and-dtor" class="headerlink" title="c++ ctor and dtor"></a>c++ ctor and dtor</h3><p>base-class subobjects, const or reference nonstatic data members. A base-class subobject, or a nonstatic data member, not mentioned in the member-initializer list is implicitly initialized with a default constructor, i.e. a constructor that can be called with no argument. Consequently, the language rules imply that all subobjects are constructed by the time the first statement of the constructor body (if not empty) is executed.</p>
<h3 id="iterator-validation-after-erase"><a href="#iterator-validation-after-erase" class="headerlink" title="iterator validation after erase"></a>iterator validation after erase</h3><ul>
<li>sequence container</li>
</ul>
<ol>
<li>vector: the iterator following the itertor which erased is invalid</li>
<li>string: the iterator following the itertor which erased is invalid</li>
<li>array: no erase function</li>
<li>deque: all iterator is invalid, unless the erased iterator is the begining or the end, in which case, only the erased iterator is invalid.</li>
<li>list: not affect other iterator</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>c/cpp-useful-tools</title>
    <url>/2015/06/2015-6-c-cpp-useful-tools2015-06-15/</url>
    <content><![CDATA[<h3 id="cdecl"><a href="#cdecl" class="headerlink" title="cdecl"></a>cdecl</h3><p> Cdecl  (and  c++decl) is a program for encoding and decoding C (or C++) type declarations.</p>
<p> <a href="http://cdecl.org/">cdecl online website</a></p>
<h3 id="size-on-mac"><a href="#size-on-mac" class="headerlink" title="size(on mac)"></a>size(on mac)</h3><p>size – print the size of the sections in an object file.<br><code>size -x(print by hex) -l -m a.out</code></p>
<span id="more"></span>
<h3 id="otool-on-mac"><a href="#otool-on-mac" class="headerlink" title="otool(on mac)"></a>otool(on mac)</h3><p>otool – object file displaying tool.<br><code>otool -s __TEXT(which segment) __text(which section) a.out</code></p>
<h3 id="nm-on-mac"><a href="#nm-on-mac" class="headerlink" title="nm(on mac)"></a>nm(on mac)</h3><p>see the symbol table<br><code>nm libwens.so</code></p>
<h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><p>find the printable strings in a object, or other binary, file</p>
<h3 id="clang-amp-g-options"><a href="#clang-amp-g-options" class="headerlink" title="clang++ &amp; g++ options"></a>clang++ &amp; g++ options</h3><ol>
<li>-fno-elide-constructors</li>
</ol>
<h3 id="debugging-amp-profiling"><a href="#debugging-amp-profiling" class="headerlink" title="debugging &amp; profiling"></a>debugging &amp; profiling</h3><ol>
<li>valgrind</li>
<li>windows debug runtime</li>
</ol>
<h3 id="define-config"><a href="#define-config" class="headerlink" title="define config"></a>define config</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_MSC_VER)</span></span><br><span class="line"><span class="meta">#   <span class="keyword">if</span> _MSC_VER &lt;= 1900</span></span><br><span class="line"><span class="meta">#       <span class="keyword">error</span> Boost.PFR library requires MSVC with c++17 support (Visual Studio 2017 or later).</span></span><br><span class="line"><span class="meta">#   <span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> __cplusplus &lt; 201402L</span></span><br><span class="line"><span class="meta">#   <span class="keyword">error</span> Boost.PFR library requires at least C++14.</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h3 id="static-code-analyzer"><a href="#static-code-analyzer" class="headerlink" title="static code analyzer"></a>static code analyzer</h3><ol>
<li>clang static analyzer</li>
<li>pvs-studio</li>
<li>cppchecker</li>
</ol>
<h3 id="dynamic-analyzer"><a href="#dynamic-analyzer" class="headerlink" title="dynamic analyzer"></a>dynamic analyzer</h3><ol>
<li>valgrind</li>
<li>Dr.Memory</li>
<li>Intel Inspector</li>
</ol>
<h3 id="compile-analyzer"><a href="#compile-analyzer" class="headerlink" title="compile analyzer"></a>compile analyzer</h3><ol>
<li>Address sanitizer</li>
<li>Memory sanitizer</li>
<li>Thread sanitizer<br><code>clang main.cpp -o main -fsanitizer=address | memory | thread</code></li>
</ol>
<h3 id="performance-profile-tool"><a href="#performance-profile-tool" class="headerlink" title="performance profile tool"></a>performance profile tool</h3><ol>
<li>intel vtune amplifier</li>
</ol>
<h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><ol>
<li><code>break xxxx if xxxx</code></li>
<li>break then execute command<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">(gdb) b do_mmap_pgoff</span><br><span class="line">Breakpoint <span class="number">1</span> <span class="keyword">at</span> <span class="number">0xffffffff8111a441</span>: <span class="built_in">file</span> mm/mmap.c, <span class="built_in">line</span> <span class="number">940.</span></span><br><span class="line">(gdb) <span class="keyword">command</span> <span class="title">1</span></span><br><span class="line">Type commands <span class="keyword">for</span> when <span class="built_in">breakpoint</span> <span class="number">1</span> is hit, <span class="literal">one</span> per <span class="built_in">line</span>.</span><br><span class="line">End <span class="keyword">with</span> <span class="keyword">a</span> <span class="built_in">line</span> saying just <span class="string">&quot;end&quot;</span>.</span><br><span class="line">&gt;print addr</span><br><span class="line">&gt;print <span class="built_in">len</span></span><br><span class="line">&gt;print prot</span><br><span class="line">&gt;<span class="function"><span class="keyword">end</span></span></span><br><span class="line"><span class="function">(<span class="title">gdb</span>)</span></span><br></pre></td></tr></table></figure></li>
<li><code>gdb --args pizzamaker --deep-dish --toppings=pepperoni</code></li>
<li><code>macro expand task_is_stopped_or_traced(init_task)</code></li>
<li><code>ctrl+x+a</code>  toggle to &#x2F; from tui mode<br><code>ctrl+p / ctrl+n</code> previous or next command in tui mode<br><code>ctrl+x+2</code> swith between windows</li>
<li><code>ctrl+l</code> clear the gdb commandline or reflesh the screen</li>
<li><code>set print pretty on</code>  open print pretty</li>
<li><code>set print array-indexes on</code> open array index</li>
<li><code>info share</code>  no info in bt, maybe miss sharelib</li>
<li><code>file the_exec_file</code>  no info in bt, maybe not read the symble of executable</li>
<li><code>start</code> go to program start(main function, generally)</li>
<li><code>record</code> debug reverse</li>
<li><code>g++ -g3</code> for macro info, which -g is g2 for default</li>
<li><code>dprintf location, format_string</code>  dynamic printf in gdb</li>
<li><code>show non-stop/ show scheduler-locking</code>  gdb non-stop mode or all-stop mode</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>c/c++</tag>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>c-problems set</title>
    <url>/2015/06/2015-6-c-problems-set2015-06-16/</url>
    <content><![CDATA[<h3 id="Linux-program-startup"><a href="#Linux-program-startup" class="headerlink" title="Linux program startup"></a>Linux program startup</h3><p><img src="/images/2015/c_linux_startup.png" alt="c linux startup"></p>
<ol>
<li>the shell or gui calls <code>execve()</code> which execute linux system call execve(), it will set up a stack for you, and push onto it <strong>argc</strong>, <strong>argv</strong>, <strong>envp</strong>. the filedescription  0, 1, 2 are left to whatever the shell set them to. The loader does much work for you setting up your relocations, and as we’ll see much later, calling your preinitializers. When everything is ready, control is handed to your program by calling  _start().</li>
</ol>
<h3 id="escape-sequences-in-c"><a href="#escape-sequences-in-c" class="headerlink" title="escape sequences in c"></a>escape sequences in c</h3><p><img src="//images/2015/c_escape_sequence.png" alt="escape sequence"></p>
<blockquote>
<p>&#x2F;000  —- &#x2F; 后面1,2,or 3三个8进制的数,表示character在character set中的值<br>  &#x2F;xhh —– &#x2F; 后面任意个16进制的数,表示character在character set中的值</p>
</blockquote>
<span id="more"></span>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>c与cpp的不同</title>
    <url>/2015/06/2015-6-c%E4%B8%8Ecpp%E7%9A%84%E4%B8%8D%E5%90%8C2015-06-18/</url>
    <content><![CDATA[<h3 id="sizeof-‘a’-的值"><a href="#sizeof-‘a’-的值" class="headerlink" title="sizeof(‘a’)的值"></a>sizeof(‘a’)的值</h3><p><code>sizeof(&#39;a&#39;)</code>: c中’a’的字符常量是int型, 所以输出4.<br>               c++中是char型,所以输出1.</p>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Backtracking(Rat in Maze)</title>
    <url>/2016/01/Backtracking-Rat-in-Maze2016-01-02/</url>
    <content><![CDATA[<p>A Maze is given as N*N binary matrix of blocks where source block is the upper left most block i.e., maze[0][0] and destination block is lower rightmost block i.e., maze[N-1][N-1]. A rat starts from source and has to reach destination. The rat can move only in two directions: forward and down.</p>
<p>In the maze matrix, 0 means the block is dead end and 1 means the block can be used in the path from source to destination. Note that this is a simple version of the typical Maze problem. For example, a more complex version can be that the rat can move in 4 directions and a more complex version can be with limited number of moves.</p>
<p>Following is an example maze.</p>
<blockquote>
<p>Gray blocks are dead ends(value &#x3D; 0).</p>
</blockquote>
<p><img src="/images/2016/ratinmaze_filled11.png" alt="ratinmaze_filled"></p>
<span id="more"></span>
<p>Following is binary matrix representation of the above maze</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;1, 0, 0, 0&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;1, 1, 0, 1&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;0, 1, 0, 0&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;1, 1, 1, 1&#125;</span></span><br></pre></td></tr></table></figure>

<p>Following is maze with highlighted solution path.<br><img src="/images/2016/ratinmaze_filled_path1.png" alt="ratinmaze_filled_path"></p>
<p>Following is the solution matrix(output of program) for the above input maze.</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;1, 0, 0, 0&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;1, 1, 0, 0&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;0, 1, 0, 0&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-variable">&#123;0, 1, 1, 1&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">All entries in solution path are marked as 1.</span></span><br></pre></td></tr></table></figure>

<h3 id="Native-Algorithm"><a href="#Native-Algorithm" class="headerlink" title="Native Algorithm"></a>Native Algorithm</h3><p>The Naive Algorithm is to generate all paths from source to destination and one by one check if the generated path satisfies the constraints.</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> there are untried paths</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">generate</span> the next path</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">this</span> path has all blocks as <span class="number">1</span></span><br><span class="line">  &#123;</span><br><span class="line">    print <span class="keyword">this</span> path;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Backtracking-Algorithm"><a href="#Backtracking-Algorithm" class="headerlink" title="Backtracking Algorithm"></a>Backtracking Algorithm</h3><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">If destination is reached</span><br><span class="line">    print the solution matrix</span><br><span class="line">Else</span><br><span class="line">    a) Mark current cell in solution matrix as 1.</span><br><span class="line">    b) Move forward in horizontal direction<span class="built_in"> and </span>recursively<span class="built_in"> check </span>if this</span><br><span class="line">     <span class="built_in"> move </span>leads to a solution.</span><br><span class="line">    c) If the<span class="built_in"> move </span>chosen in the above step doesn&#x27;t lead to a solution</span><br><span class="line">      then<span class="built_in"> move </span>down<span class="built_in"> and </span>check<span class="built_in"> if </span> this<span class="built_in"> move </span>leads to a solution.</span><br><span class="line">    d) If none of the above solutions work then unmark this cell as 0</span><br><span class="line">      (BACKTRACK)<span class="built_in"> and </span>return false.</span><br></pre></td></tr></table></figure>

<p><em>Implementation of Backtracking solution</em></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* C/C++ program to solve Rat in a Maze problem using</span></span><br><span class="line"><span class="comment">   backtracking */</span></span><br><span class="line">#<span class="keyword">include</span>&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Maze size</span></span><br><span class="line">#define N <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> solve<span class="constructor">MazeUtil(<span class="params">int</span> <span class="params">maze</span>[N][N], <span class="params">int</span> <span class="params">x</span>, <span class="params">int</span> <span class="params">y</span>, <span class="params">int</span> <span class="params">sol</span>[N][N])</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* A utility function to print solution matrix sol[N][N] */</span></span><br><span class="line">void print<span class="constructor">Solution(<span class="params">int</span> <span class="params">sol</span>[N][N])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            printf(<span class="string">&quot; %d &quot;</span>, sol<span class="literal">[<span class="identifier">i</span>]</span><span class="literal">[<span class="identifier">j</span>]</span>);</span><br><span class="line">        printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* A utility function to check if x,y is valid index for N*N maze */</span></span><br><span class="line"><span class="built_in">bool</span> is<span class="constructor">Safe(<span class="params">int</span> <span class="params">maze</span>[N][N], <span class="params">int</span> <span class="params">x</span>, <span class="params">int</span> <span class="params">y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// if (x,y outside maze) return false</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt;= <span class="number">0</span><span class="operator"> &amp;&amp; </span>x &lt; N<span class="operator"> &amp;&amp; </span>y &gt;= <span class="number">0</span><span class="operator"> &amp;&amp; </span>y &lt; N<span class="operator"> &amp;&amp; </span>maze<span class="literal">[<span class="identifier">x</span>]</span><span class="literal">[<span class="identifier">y</span>]</span><span class="operator"> == </span><span class="number">1</span>)</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    return <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* This function solves the Maze problem using Backtracking.  It mainly</span></span><br><span class="line"><span class="comment">   uses solveMazeUtil() to solve the problem. It returns false if no</span></span><br><span class="line"><span class="comment">   path is possible, otherwise return true and prints the path in the</span></span><br><span class="line"><span class="comment">   form of 1s. Please note that there may be more than one solutions,</span></span><br><span class="line"><span class="comment">   this function prints one of the feasible solutions.*/</span></span><br><span class="line"><span class="built_in">bool</span> solve<span class="constructor">Maze(<span class="params">int</span> <span class="params">maze</span>[N][N])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> sol<span class="literal">[N]</span><span class="literal">[N]</span> = &#123; &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(solve<span class="constructor">MazeUtil(<span class="params">maze</span>, 0, 0, <span class="params">sol</span>)</span><span class="operator"> == </span><span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;Solution doesn&#x27;t exist&quot;</span>);</span><br><span class="line">        return <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print<span class="constructor">Solution(<span class="params">sol</span>)</span>;</span><br><span class="line">    return <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* A recursive utility function to solve Maze problem */</span></span><br><span class="line"><span class="built_in">bool</span> solve<span class="constructor">MazeUtil(<span class="params">int</span> <span class="params">maze</span>[N][N], <span class="params">int</span> <span class="params">x</span>, <span class="params">int</span> <span class="params">y</span>, <span class="params">int</span> <span class="params">sol</span>[N][N])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// if (x,y is goal) return true</span></span><br><span class="line">    <span class="keyword">if</span>(x<span class="operator"> == </span>N-<span class="number">1</span><span class="operator"> &amp;&amp; </span>y<span class="operator"> == </span>N-<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sol<span class="literal">[<span class="identifier">x</span>]</span><span class="literal">[<span class="identifier">y</span>]</span> = <span class="number">1</span>;</span><br><span class="line">        return <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if maze[x][y] is valid</span></span><br><span class="line">    <span class="keyword">if</span>(is<span class="constructor">Safe(<span class="params">maze</span>, <span class="params">x</span>, <span class="params">y</span>)</span><span class="operator"> == </span><span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// mark x,y as part of solution path</span></span><br><span class="line">        sol<span class="literal">[<span class="identifier">x</span>]</span><span class="literal">[<span class="identifier">y</span>]</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Move forward in x direction */</span></span><br><span class="line">        <span class="keyword">if</span> (solve<span class="constructor">MazeUtil(<span class="params">maze</span>, <span class="params">x</span>+1, <span class="params">y</span>, <span class="params">sol</span>)</span><span class="operator"> == </span><span class="literal">true</span>)</span><br><span class="line">            return <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If moving in x direction doesn&#x27;t give solution then</span></span><br><span class="line"><span class="comment">           Move down in y direction  */</span></span><br><span class="line">        <span class="keyword">if</span> (solve<span class="constructor">MazeUtil(<span class="params">maze</span>, <span class="params">x</span>, <span class="params">y</span>+1, <span class="params">sol</span>)</span><span class="operator"> == </span><span class="literal">true</span>)</span><br><span class="line">            return <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If none of the above movements work then BACKTRACK:</span></span><br><span class="line"><span class="comment">            unmark x,y as part of solution path */</span></span><br><span class="line">        sol<span class="literal">[<span class="identifier">x</span>]</span><span class="literal">[<span class="identifier">y</span>]</span> = <span class="number">0</span>;</span><br><span class="line">        return <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// driver program to test above function</span></span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> maze<span class="literal">[N]</span><span class="literal">[N]</span>  =  &#123; &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    solve<span class="constructor">Maze(<span class="params">maze</span>)</span>;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>brew 手工下载文件安装</title>
    <url>/2016/01/brew-%E6%89%8B%E5%B7%A5%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%852016-01-06/</url>
    <content><![CDATA[<p>今天又碰到了<code>brew install</code>安装时不能下载相关的文件, 哎! 天朝的”防火墙”已无力吐槽…</p>
<p>之前碰到过的, 记得brew可以手动下载文件放入到brew的cache文件夹即可. <strong>果然好记性不如烂笔头</strong>,这里将方法记录下,不用每次得上网去搜, 要是没有联网咋办!</p>
<p><img src="/images/2016/brew_install_manully.png" alt="brew install failed"></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用如下命令得到brew下载的cache目录</span></span><br><span class="line"></span><br><span class="line">brew <span class="comment">--cache</span></span><br></pre></td></tr></table></figure>
<p>将下载的文件放到该目录, 然后重新运行安装命令即可(<strong>要注意下载文件的文件名要[修改]与上面的一致</strong>)</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>eclipse IDE</title>
    <url>/2016/01/eclipse-IDE2016-01-18/</url>
    <content><![CDATA[<h3 id="配置toolchain"><a href="#配置toolchain" class="headerlink" title="配置toolchain"></a>配置toolchain</h3><blockquote>
<p>一般在mac下选择 <code>MacOSX GCC</code>, linux 下选择<code>Linux GCC</code></p>
</blockquote>
<ol>
<li><p>然后可以配置gcc (可以自己源码编译或者下载编译好的hpc gcc)<a href="http://hpc.sourceforge.net/">hpc gcc</a><br><img src="/images/2016/hpc-gcc.png" alt="hpc-gcc"></p>
</li>
<li><p>配置eclipse使用该版本gcc</p>
</li>
</ol>
<ul>
<li><p>配置preference(应用于全部项目)<br><img src="/images/2016/gcc-preference.png" alt="eclipse preference"></p>
</li>
<li><p>配置项目的属性（应用于单个项目）<br><img src="/images/2016/eclipse-project-property.png" alt="eclipse project property"></p>
</li>
</ul>
<h3 id="删除一整行"><a href="#删除一整行" class="headerlink" title="删除一整行"></a>删除一整行</h3><ol>
<li>使用shutcuts：<code>command + d</code></li>
<li>按鼠标左键3下，然后按delete键</li>
</ol>
<span id="more"></span>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>mac osx 破解wpa/wpa2 wifi</title>
    <url>/2016/01/mac-osx-%E7%A0%B4%E8%A7%A3wpa-wpa2-wifi2016-01-06/</url>
    <content><![CDATA[<p>在mac osx下进行wpa&#x2F;wpa2 加密的wifi破解</p>
<ul>
<li><p>首先要安装<code>aircrack-ng</code>工具</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以使用Homebrew进行安装</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>aircrack-ng</span><br></pre></td></tr></table></figure>
<p>如果安装过程中出现下载失败, <a href="/2016/01/brew-%E6%89%8B%E5%B7%A5%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%852016-01-06/">这篇文章</a></p>
</li>
<li><p>用airport搜索附近wifi</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">sudo</span> air<span class="keyword">port</span> -s</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>结果如下图所示:<br><img src="/images/2016/airport_s.png" alt="airport -s output"></p>
</li>
<li><p>根据搜索出的wifi进行嗅探</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">sudo airport <span class="strong">**<span class="emphasis">*en0*</span>**</span> sniff <span class="strong">**<span class="emphasis">*1*</span>**</span></span><br></pre></td></tr></table></figure>
<p>上面的en0为wifi card所在的地址, 有的也可能为en1, 可以根据实际情况输入, 可从以下地方获得:<br><img src="/images/2016/wificard_addr.png" alt="wifi card addr"></p>
</li>
</ul>
<p>1为你所要嗅探的wifi所在的CHANNEL.</p>
<p>默认嗅探的所存的文件在&#x2F;tmp中, 以airportSniff****.cap形式命名.</p>
<ul>
<li>最后就是使用aircrack-ng和下载的密码字典进行暴力破解<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">aircrack-ng -w wordlist airportSniff*<span class="strong">***</span>.cap</span><br></pre></td></tr></table></figure>
一般输入如下所示:<br><img src="/images/2016/aircrack-ng.png" alt="aircrack-ng run output"></li>
</ul>
<p>看上面cap文件内的抓包内容, Encryption列中找到WPA (1 handshake)—它表示抓包成功. 当然要找到你想破解wifi的成功抓包, 然后在「Index number of target network?」中输入该成功抓包所在的行号. 此示例中为1:<br><img src="/images/2016/index_number.png" alt="index number"></p>
<p>破解过程如下:<br><img src="/images/2016/running.png" alt="aircrack-ng running"></p>
<p>如果破解成功, 会显示 KEY FOUND!:<br><img src="/images/2016/aircrack-ng-success.jpg" alt="aircrack-ng crack successfully"></p>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记 effective modern c++</title>
    <url>/2016/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-effective-modern-cpp2016-01-07/</url>
    <content><![CDATA[<h3 id="判断一个表达式是lvalue-or-rvalue"><a href="#判断一个表达式是lvalue-or-rvalue" class="headerlink" title="判断一个表达式是lvalue or rvalue"></a>判断一个表达式是lvalue or rvalue</h3><blockquote>
<p>A useful heuristic to determine whether an expression is an lvalue is to ask if you can take its address. If you can, it typically is. If you can’t, it’s usually an rvalue.</p>
</blockquote>
<p>一般情况下， 可以根据以上所述进行判断。</p>
<h3 id="关于exception-safe"><a href="#关于exception-safe" class="headerlink" title="关于exception safe"></a>关于exception safe</h3><p>如果一个函数是exception safe的，则它表示提供basic exception safety guarantee ，至少要保证：<em><strong>即使函数有exception抛出，pragram invariants remain intact(比如： 没有数据结构出错)  and no resources are leaked</strong></em><br>如果函数提供strong exception safety guarantee， 则保证：if an exception arises, the state of the program remains as it was prior to the call.</p>
<h3 id="decltype"><a href="#decltype" class="headerlink" title="decltype"></a>decltype</h3><blockquote>
<p>int x &#x3D; 0</p>
</blockquote>
<span id="more"></span>
<p>x is the name of a variable.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">decltype</span><span class="params">(x)</span></span> ---&gt; int</span><br><span class="line"><span class="function"><span class="title">decltype</span><span class="params">((x)</span></span>) ---&gt; int &amp;</span><br></pre></td></tr></table></figure>
<p>(x) yield an expression more complicated than a name.</p>
<h3 id="获取类型相关"><a href="#获取类型相关" class="headerlink" title="获取类型相关"></a>获取类型相关</h3><p>c++ standard：<typeinfo><br><code> typeid(T).name()</code></p>
<p>&lt;boost&#x2F;type_index.hpp&gt;</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;boost/type_index.hpp&gt;</span></span></span><br><span class="line">  <span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function">  <span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">const</span> T&amp; param)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> std::cout;</span><br><span class="line">    <span class="keyword">using</span> boost::typeindex::type_id_with_cvr;</span><br><span class="line">    <span class="comment">// show T</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T = &quot;</span>&lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;T&gt;().<span class="built_in">pretty_name</span>() &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="comment">// show param&#x27;s type</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;param = &quot;</span></span><br><span class="line">         &lt;&lt; <span class="built_in">type_id_with_cvr</span>&lt;<span class="keyword">decltype</span>(param)&gt;().<span class="built_in">pretty_name</span>()</span><br><span class="line">         &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="uniform-initialization"><a href="#uniform-initialization" class="headerlink" title="uniform initialization"></a>uniform initialization</h3><blockquote>
<p>T x{} —-&gt; {} is that it prohibits implicit <code>narrowing conversions</code> among built-in type.<br>{} means no arguments, not an empty std::initializer_list</p>
</blockquote>
<h3 id="prefer-deleted-function-to-private-function"><a href="#prefer-deleted-function-to-private-function" class="headerlink" title="prefer deleted function to private function"></a>prefer deleted function to private function</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Widget</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>();</span><br><span class="line">    <span class="built_in">Widget</span>(<span class="type">const</span> Widget&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">    Widget&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Widget&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="c-special-member-function-generation"><a href="#c-special-member-function-generation" class="headerlink" title="c++ special member function generation"></a>c++ special member function generation</h3><ul>
<li><p>The special member functions are those compilers may generate on their own:<br>default constructor, destructor, copy operations, move operations.</p>
</li>
<li><p>a default constructor is generated only if the class declares no constructors at all.</p>
</li>
<li><p>copy constructor &amp; copy assignment operator; <em><strong>declare one doesn’t prevent compiler from generating the other</strong></em></p>
</li>
<li><p>move constructor &amp; move assignment operator; <em><strong>if your declare one, the compiler prevents the other</strong></em></p>
</li>
<li><p>declare copy function, that prevents compiler from generating move function. vice versa.</p>
</li>
<li><p>move functions are generated for a class only when:</p>
<ol>
<li>No copy operation are declared in class</li>
<li>No move operation are declared in class</li>
<li>No destructor are declared in class.</li>
</ol>
</li>
<li><p>destructor now is noexcept and virtual only if a base class destructor is virtual</p>
</li>
<li><p>Member template functions never suppress generation of special member functions.</p>
</li>
</ul>
<h3 id="move-operation-amp-std-move-amp-std-forward"><a href="#move-operation-amp-std-move-amp-std-forward" class="headerlink" title="move operation &amp; std::move() &amp; std::forward()"></a>move operation &amp; std::move() &amp; std::forward()</h3><ol>
<li>classname(classname&amp;&amp; ); it cannot take a const rvalue parameter, when the parameter is a const rvalue it trigger the copy constructor.</li>
<li>std::move() does cast(cast to rvalue), not moving; it doesn’t even guarantee that the object it’s casting will be eligible to be moved.</li>
<li>std::forward is a conditional cast: it casts to an rvalue only if its argument was bound to an rvalue.</li>
<li>Neither std::move nor std::forward do anything in runtime</li>
</ol>
<ul>
<li>type&amp;&amp;(must be just this form) means univeral reference, when it should type deduction.<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(T&amp;&amp; params)</span></span>;   <span class="comment">//params is a universal reference</span></span><br><span class="line"></span><br><span class="line">Widget w;</span><br><span class="line"><span class="built_in">func</span>(w);   <span class="comment">//lvalue w passed to func; the type of params is Widget&amp;(an lvalue reference)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">func</span>(std::<span class="built_in">move</span>(w)) <span class="comment">// rvlaue passed to func; the type of params is Widget&amp;&amp;(an rvalue reference)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="distinguish-universal-reference-to-rvalue-reference"><a href="#distinguish-universal-reference-to-rvalue-reference" class="headerlink" title="distinguish universal reference to rvalue reference"></a>distinguish universal reference to rvalue reference</h3><p>just T&amp;&amp;, but in following two context(the presence of type deduction), it is universal reference:</p>
<ol>
<li><p>parameter in function template</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(T&amp;&amp; )</span></span>;</span><br></pre></td></tr></table></figure>
<p>but when add const, it just a rvalue reference, <code>void func(const T&amp;&amp;)</code></p>
</li>
<li><p>auto declaration</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">auto<span class="meta">&amp;&amp; var2 = var1;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="smart-pointers"><a href="#smart-pointers" class="headerlink" title="smart pointers"></a>smart pointers</h3><ol>
<li>shared_ptr<br>shared_ptr 是普通raw pointer的两倍大小，它通常含有两个ptr，如下图所示：<br><img src="/images/2016/shared_ptr.png" alt="shared_ptr"><br>  以下三种情况会创建control block：</li>
</ol>
<ul>
<li>std::make_shared 总是会创建</li>
<li>当shared_ptr由unique_ptr构造</li>
<li>当shared_ptr由raw pointer构造</li>
</ul>
<ol start="2">
<li>weak_ptr<br>用于悬浮指针的情况, 可以使用std::weak_ptr::lock成员函数知道其持有的指针是否dangle; 它返回一个std::shared_ptr指针，如果dangle，则返回NULL<br>可以用一下两个例子说明：</li>
</ol>
<ul>
<li><p>两个shared_ptr指向同个pointer，其中一个shared_ptr被destroy的情况<br><img src="/images/2016/weak_ptr.png" alt="weak_ptr"><br>  如上图所示：A, C share指向B， B也指向A（此时可用weak_ptr）; A指针destroy的情况。</p>
</li>
<li><p>observer设计模式中<br>  subjects（状态可能变化的objects）中一般会维护observer的指针数组，这样状态变化时可以通知注册的observer，它对observer的生存期不敢兴趣， 但它对知道其中的哪些observer已经destroy感兴趣， 这样它后面就不需通知这些observer，此时就可用weak_ptr</p>
</li>
</ul>
<ol start="3">
<li>unique_ptr<br>unique_ptr比较适用于类中的工厂方法， unique_ptr可以隐式的转化为shared_ptr</li>
</ol>
<h3 id="reference-collapsing"><a href="#reference-collapsing" class="headerlink" title="reference collapsing"></a>reference collapsing</h3><p>it happens when <code>T&amp; &amp;&amp; para</code> or something like this.</p>
<ol>
<li>template instantiation</li>
<li>auto</li>
<li>typedef or alias</li>
<li>decltype</li>
</ol>
<blockquote>
<p>If either reference is an lvalue reference, the result is an lvalue reference. Otherwise (i.e., if both are rvalue references) the result is an rvalue reference.</p>
</blockquote>
<h3 id="type-related"><a href="#type-related" class="headerlink" title="type related"></a>type related</h3><ol>
<li>the type of an expression  is independent of whether the expression  is an lvalue or an rvlaue.</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Widget</span>(Widget&amp;&amp; rhs); <span class="comment">//rhs is an lvalue, although it has a rvalue reference type</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>auto tpye deduction is usually the same as template deduction, but auto type deduction assumes that a braced initializer represent as a std::initializer_list and template deduction is not; auto in a function return type or lambda parameter implies template tpye deduction, not auto type deduction.</p>
</li>
<li><p>As a general rule, “invisiable” proxy class doesn’t play well with auto. Objects of such classes are often not designed to live longer than a single statement. so should avoid <code>auto someVar = expression of &quot;invisible&quot; proxy class type;</code></p>
</li>
</ol>
<h3 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h3><ol>
<li>when applied to object: it is a beefed-up const, which indicates the object is constant and is initialized with value known in compilation time.</li>
<li>constexpr functions can produce compile-time results when called with arguments whose values are known during compilation.</li>
</ol>
<h3 id="stack-unwinding"><a href="#stack-unwinding" class="headerlink" title="stack unwinding"></a>stack unwinding</h3><p>The process of removing function entries from function call stack at run time is called Stack Unwinding.<br>In C++, when an exception occurs, the function call stack is linearly searched for the exception handler, and all the entries before the function with exception handler are removed from the function call stack.</p>
<h3 id="Pimpl-Idiom-pointer-to-implementation"><a href="#Pimpl-Idiom-pointer-to-implementation" class="headerlink" title="Pimpl Idiom(pointer to implementation)"></a>Pimpl Idiom(pointer to implementation)</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// widget.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>();</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Impl</span>;</span><br><span class="line">    std::unique_ptr&lt;Impl&gt; pImpl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// wigdet.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Widget</span>::Impl &#123;</span><br><span class="line"></span><br><span class="line">    std::string str;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(): <span class="built_in">pImpl</span>(std::<span class="built_in">make_unique</span>&lt;Impl&gt;()) &#123;&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>() = <span class="keyword">default</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The Pimpl Idiom is a way to reduce compilation dependencies between a class’s implementation and the class’s clients.</p>
<h3 id="std-is-same-std-decay-std-is-base-of-std-is-constructible-std-declval"><a href="#std-is-same-std-decay-std-is-base-of-std-is-constructible-std-declval" class="headerlink" title="std::is_same, std::decay, std::is_base_of, std::is_constructible, std::declval"></a>std::is_same, std::decay, std::is_base_of, std::is_constructible, std::declval</h3><ol>
<li>std::is_same judge whether the two type is the same type.</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">!std::is_same&lt;T, Person&gt;::value</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>std::decay  either remove refs, cv-qulifiers   or  turn array and function types into pointers</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::decay&lt;T&gt;::type</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>std::is_base_of&lt;T1, T2&gt;  judge whether type T1 is derived from type T2;  Types are considered to be derived from themselves</p>
</li>
<li><p>std::is_constructible&lt;T, P&gt; judge is T can be constructed from P as parameter</p>
</li>
<li><p>std::declval<T> return the reference of T, make call member function possible without through constructor.</p>
</li>
</ol>
<h3 id="make-std-thread-unjoinable-all-path"><a href="#make-std-thread-unjoinable-all-path" class="headerlink" title="make std::thread unjoinable all path"></a>make std::thread unjoinable all path</h3><ol>
<li>because when std::thread is joinable, invoke its destructor will cause program termination.</li>
</ol>
<h3 id="thread-communication"><a href="#thread-communication" class="headerlink" title="thread communication"></a>thread communication</h3><ol>
<li>use condition_variable, mutex, bool flag</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">std::condition_variable cv;</span><br><span class="line">std::mutex  m;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">---- tranmition end</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">std::lock_guard&lt;std::mutex&gt; <span class="built_in">ul</span>(m);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">cv.<span class="built_in">notify_one</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---- recieving end</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::unique_lock&lt;std::mutex&gt; <span class="title">ul</span><span class="params">(m)</span></span>;</span><br><span class="line">cv.<span class="built_in">wait</span>(ul, []&#123;<span class="keyword">return</span> flag;&#125;)  <span class="comment">// should use condition, avoid spurious wakeup or cannot wakeup forever</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><ol>
<li>prevent compiler from optimizing the variable; let it load the value of the variable from memory everytime.</li>
<li>make use of keyword volatile alone is not safe.</li>
</ol>
<h3 id="multithread"><a href="#multithread" class="headerlink" title="multithread"></a>multithread</h3><ul>
<li>data race</li>
</ul>
<ol>
<li>one variable – use std::atomic enough;  two or more – use std::mutex</li>
</ol>
<h3 id="function-T-amp-amp-and-function-overload"><a href="#function-T-amp-amp-and-function-overload" class="headerlink" title="function(T&amp;&amp;) and function overload"></a>function(T&amp;&amp;) and function overload</h3><ol>
<li>best not to use together</li>
<li>tag depatch and std::enable_if technology(effective mordern c++ item27)</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记 python</title>
    <url>/2016/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-python2016-01-10/</url>
    <content><![CDATA[<h3 id="create-new-object-or-modify-the-object"><a href="#create-new-object-or-modify-the-object" class="headerlink" title="create new object or modify the object"></a>create new object or modify the object</h3><ul>
<li>create new object<blockquote>
<p>slice operator([:]); + operator;</p>
</blockquote>
</li>
</ul>
<h3 id="dir-和-help-函数"><a href="#dir-和-help-函数" class="headerlink" title="dir 和 help 函数"></a>dir 和 help 函数</h3><ol>
<li><code>var = &#39;&#39;; dir(var)</code><br> 可以输出var那个object中的所有方法。</li>
<li><code>var = &#39;&#39;; ty = type(var); help(ty.method)</code><br> 可以输出var的类型中method的相关信息。</li>
</ol>
<span id="more"></span>

<h3 id="c-x2F-c-调用python函数"><a href="#c-x2F-c-调用python函数" class="headerlink" title="c&#x2F;c++ 调用python函数"></a>c&#x2F;c++ 调用python函数</h3><p>流程如下：</p>
<ol>
<li>我们先定义一个python函数<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">def great_function(a)</span><br><span class="line">  <span class="params">...</span><span class="params">...</span><span class="params">...</span></span><br></pre></td></tr></table></figure></li>
<li>我们使用上面的python函数定义一个c&#x2F;c++函数<blockquote>
<p>假设上面的great_function在一个module中， 比如说， 这个module名字叫great_module.py</p>
</blockquote>
</li>
</ol>
<p>那么c&#x2F;c++中函数可以使用下面方法进行定义：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;<span class="module-access"><span class="module"><span class="identifier">Python</span>.</span></span>h&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> great<span class="constructor">_function_from_python(<span class="params">int</span> <span class="params">a</span>)</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="built_in">int</span> res;</span><br><span class="line">    PyObject *pModule, *pFunc;</span><br><span class="line">    PyObject *pArgs, *pValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* import the module*/</span></span><br><span class="line">    pModule = <span class="constructor">PyImport_Import(PyString_FromString(<span class="string">&quot;great_module&quot;</span>)</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* great_function in great_module */</span></span><br><span class="line">    pFunc = <span class="constructor">PyObject_GetAttrString(<span class="params">pModule</span>, <span class="string">&quot;great_function&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* build args */</span></span><br><span class="line">    pArgs = <span class="constructor">PyTuple_New(1)</span>;</span><br><span class="line">    <span class="constructor">PyTuple_SetItem(<span class="params">pArgs</span>,0, PyInt_FromLong(<span class="params">a</span>)</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* call */</span></span><br><span class="line">    pValue = <span class="constructor">PyObject_CallObject(<span class="params">pFunc</span>, <span class="params">pArgs</span>)</span>;</span><br><span class="line"></span><br><span class="line">    res = <span class="constructor">PyInt_AsLong(<span class="params">pValue</span>)</span>;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>所有python元素，module、function、tuple、string等等， 实际上都是PyObject。c&#x2F;c++中操纵它们，一律使用PyObject指针。</p>
</li>
<li><p>Python的类型可以与c&#x2F;c++语言可以相互转换。 Python类型xxx转换为c&#x2F;c++语言类型yyy要使用Pyxxx_Asyyy函数；c&#x2F;c++中类型yyy转换为Python类型xxx使用Pyxxx_Fromyyy函数。</p>
</li>
<li><p>可以创建Python类型的变量， 使用Pyxxx_New可以创建类型为xxx的变量。</p>
</li>
<li><p>若var是Tuple， 则var[i] &#x3D; b对应于PyTuple_SetItem(var, i, b)</p>
</li>
</ul>
<ol start="3">
<li>最后可以在c&#x2F;c++中测试<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;<span class="module-access"><span class="module"><span class="identifier">Python</span>.</span></span>h&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> great<span class="constructor">_function_from_python(<span class="params">int</span> <span class="params">a</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc, <span class="built_in">char</span> *argv<span class="literal">[]</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="constructor">Py_Initialize()</span>;</span><br><span class="line">    printf(<span class="string">&quot;%d&quot;</span>,great<span class="constructor">_function_from_python(2)</span>);</span><br><span class="line">    <span class="constructor">Py_Finalize()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="string中的函数和list中的函数区别"><a href="#string中的函数和list中的函数区别" class="headerlink" title="string中的函数和list中的函数区别"></a>string中的函数和list中的函数区别</h3><blockquote>
<p>string 中的函数一般都是创建一个新的string，而原来的string保留； list 中的函数一般修改参数，返回None。</p>
</blockquote>
<h3 id="regular-expression"><a href="#regular-expression" class="headerlink" title="regular expression"></a>regular expression</h3><ol>
<li><code>\s</code> — matches a whitespace character.</li>
<li>‘\S’ — matches a non-whitespace character.</li>
<li><ul>
<li>— apply to the immediately preceding character and indicates to match zero or more of the preceding characters.</li>
</ul>
</li>
<li>*? — like above, but in “non-greedy mode”.</li>
<li>() — added to a regular expression, they are ignored and allow you to extract a particular subset of the matched string.</li>
<li>\b — matches the empty string, but only at the start or end of a word.</li>
<li>\B — like above, but not in the start or end of the word.</li>
<li>\d — matches any decimal digit, equivalent to the set[0-9].</li>
<li>\D — matches any non-digit character, equivalent to [^0-9].</li>
</ol>
<h3 id="调用shell中的命令"><a href="#调用shell中的命令" class="headerlink" title="调用shell中的命令"></a>调用shell中的命令</h3><blockquote>
<p>Any program that you can launch from the shell can also be launched from Python using a <strong>pipe</strong>.</p>
</blockquote>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">cmd</span> = <span class="string">&#x27;ls -l&#x27;</span></span><br><span class="line"><span class="attr">fp</span> = os.popen(cmd)</span><br></pre></td></tr></table></figure>

<h3 id="print函数"><a href="#print函数" class="headerlink" title="print函数"></a>print函数</h3><ul>
<li><p>输出格式, 类似c中的printf, 也可以控制宽度和精度</p>
<blockquote>
<p>%d — 整形<br>%x — 16进制<br>%o — 8进制<br>bin() 函数 — 2进制<br>%f —  浮点数<br>%s — string 字符串<br>%r —  类似%s, 当时字符串会带上‘’； 也可能会带上待打印对象的一些信息</p>
</blockquote>
</li>
<li><p>print 会自动在末尾加上换行符, 如何要让它不加上‘\n’，只需在最后的参数加上’,’<br>  <code>print var1, var2,</code></p>
</li>
</ul>
<h3 id="删除list中的某项"><a href="#删除list中的某项" class="headerlink" title="删除list中的某项"></a>删除list中的某项</h3><ul>
<li><p>pop</p>
<blockquote>
<p>lst.pop(index), and return the value that will be deleted</p>
</blockquote>
</li>
<li><p>del</p>
<blockquote>
<p>del lst[index], and return None<br>del lst[:], and return None</p>
</blockquote>
</li>
<li><p>remove</p>
<blockquote>
<p>lst.remove(thevalue), and return None</p>
</blockquote>
</li>
</ul>
<h3 id="tuple-in-python"><a href="#tuple-in-python" class="headerlink" title="tuple in python"></a>tuple in python</h3><blockquote>
<p>a tuple is a comma-separated list of values:<br>    t &#x3D; ‘a’, ‘b’, ‘c’<br>  although it is not necessary, it is common in python to enclose a tuple in parentheses to help us quickly identify tuples when we look in python code.<br>    t &#x3D; (‘a’, ‘b’, ‘c’)</p>
</blockquote>
<blockquote>
<p>and to create a tuple with a single element, you have to include the final comma:<br>    t_single &#x3D; (‘a’,)</p>
</blockquote>
<h3 id="动态导入模块"><a href="#动态导入模块" class="headerlink" title="动态导入模块"></a>动态导入模块</h3><ol>
<li>use <code>importlib</code> module (also has a <code>imp</code> module which deprecated in 3.4)</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line">mymodule = importlib.import_module(<span class="string">&#x27;modulename&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>use <code>__import__</code> built_in function<br><code>mymodule = __import__(&#39;modulename&#39;)</code></p>
</li>
<li><p>examples in &lt;<dive into python>&gt;</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>modulenames = [<span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;re&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>modulenames</span><br><span class="line">output&gt; [<span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;re&#x27;</span>]</span><br><span class="line">modules = <span class="built_in">map</span>(<span class="built_in">__import__</span>, modulenames)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>modules</span><br><span class="line">output&gt; [&lt;module <span class="string">&#x27;sys&#x27;</span> (built_in)&gt;,</span><br><span class="line">          &lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;thepath&#x27;</span>&gt;,</span><br><span class="line">          &lt;module <span class="string">&#x27;re&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;thepath&#x27;</span>&gt;]</span><br><span class="line">modules[<span class="number">0</span>].version</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="doc-string-in-function"><a href="#doc-string-in-function" class="headerlink" title="doc string in function"></a>doc string in function</h3><p>将以下代码保存为test.py, 在函数中以”””……””””的包起字符串就是一个doc string:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildConnectionString</span>(<span class="params">params</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;Build a connection string from a dictionary of parameters.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  Returns string.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;;&quot;</span>.join([<span class="string">&quot;%s = %s&quot;</span> % (k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> params.items()])</span><br></pre></td></tr></table></figure>

<p>可以以一下方式输出其doc string：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> test</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> test.buildConnectionString.doc</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="python-—-doctest"><a href="#python-—-doctest" class="headerlink" title="python — doctest"></a>python — doctest</h3><ul>
<li>in some class</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, key, value=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns the value associated with key or value if key isn&#x27;t</span></span><br><span class="line"><span class="string">    in the dictionary</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d = OrderedDict(dict(s=1, a=2, n=3, i=4, t=5, y=6))</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d.get(&quot;X&quot;, 21)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d.get(&quot;i&quot;)</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> self.__<span class="built_in">dict</span>.get(key, value)</span><br></pre></td></tr></table></figure>
<ul>
<li>add following three line to the module</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="keyword">import</span> doctest</span><br><span class="line">doctest.testmod()</span><br></pre></td></tr></table></figure>

<h3 id="有用的package"><a href="#有用的package" class="headerlink" title="有用的package"></a>有用的package</h3><ul>
<li>collections: ChainMap, Counter, defaultdict, deque, namedtuple, OrderedDict</li>
<li>functools: lru_cache, partial, singleddispatch, warps</li>
<li>itertools: count, islice, cycle, repeat, compress, dropwhile, filterfalse</li>
</ul>
<h3 id="python中的threading-module-和-multiprocessing-module"><a href="#python中的threading-module-和-multiprocessing-module" class="headerlink" title="python中的threading module 和 multiprocessing module"></a>python中的threading module 和 multiprocessing module</h3><p>– python 中的thread 对于io操作是效率最高的， 而且内部实现多线程也是在一个主的线程里，类似协程</p>
<h3 id="python-import-module"><a href="#python-import-module" class="headerlink" title="python import module"></a>python import module</h3><ol>
<li>首先在<code>sys.modules</code>中找</li>
<li>若找不到， 则开始在<code>sys.meta_path</code>中查找（它包含一个finder objects的列表）– 通过<code>find_spec()</code>函数进行查找</li>
<li>若找到，则会返回一个<code>module spec</code>的对象， 其内包含loader，用于导入时使用</li>
</ol>
<h3 id="python-socket"><a href="#python-socket" class="headerlink" title="python socket"></a>python socket</h3><ul>
<li>if socket.recv() return 0, means the other side is closed(or is in the process of closing)<br><strong>if you get returned value 0, it means the socket is broken</strong></li>
</ul>
<h3 id="pyinstaller-打包python"><a href="#pyinstaller-打包python" class="headerlink" title="pyinstaller 打包python"></a>pyinstaller 打包python</h3><p><code>C:\Python27\Scripts\pyinstaller.exe -F -w  /path/to/the/python/scripts</code></p>
<h3 id="args-and-kwargs"><a href="#args-and-kwargs" class="headerlink" title="*args and **kwargs"></a>*args and **kwargs</h3><p>非keyword的variable arguments 和 keyword的variable argument</p>
<h3 id="int-amp-bytes"><a href="#int-amp-bytes" class="headerlink" title="int &amp; bytes"></a>int &amp; bytes</h3><p>from_bytes &amp; to_bytes builtin method</p>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>进程线程相关</title>
    <url>/2016/01/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B32016-01-18/</url>
    <content><![CDATA[<h3 id="default-actions-to-signals"><a href="#default-actions-to-signals" class="headerlink" title="default actions to signals"></a>default actions to signals</h3><blockquote>
<ol>
<li>almost all signals in POSIX. 1-1900, the default is to terminate without or with core dump.</li>
<li>few signals are ignored like <em><strong>SIGCHLD</strong></em></li>
<li><em><strong>SIGSTOP</strong></em> cause the program to suspend and <em><strong>SIGCONT</strong></em> to continue. common situation is use <code>CTRL-Z</code> in shell</li>
</ol>
</blockquote>
<h3 id="c-11-threads"><a href="#c-11-threads" class="headerlink" title="c++11 threads"></a>c++11 threads</h3><p>Eli Bendersky’s website: <a href="http://eli.thegreenplace.net/2016/c11-threads-affinity-and-hyperthreading/">C++11 threads, affinity and hyperthreading</a></p>
<h3 id="c-11-thread-local"><a href="#c-11-thread-local" class="headerlink" title="c++11 thread_local"></a>c++11 thread_local</h3><p>目前使用编译器的选项设置：windows:<em>__declspec(thread)</em> linux: <em>__thread</em></p>
<h3 id="使用recursive-mutex问题"><a href="#使用recursive-mutex问题" class="headerlink" title="使用recursive_mutex问题"></a>使用recursive_mutex问题</h3><blockquote>
<p>task A wants to modify a shared data structure and take a lock on its recursive mutex. It then blocks on some OS call; the task gets taken off current thread, and task B start executing. task B take  a lock on the same recursive mutex successfully because it executed on the same thread, then it will reads or modify the data which was in the middle of being modified by task A, then a disaster happen!</p>
</blockquote>
<span id="more"></span>

<h3 id="IPC方式"><a href="#IPC方式" class="headerlink" title="IPC方式"></a>IPC方式</h3><ol>
<li>匿名管道（pipe） [进程间要有父子关系]</li>
<li>具名管道 （mkfifo）</li>
<li>signal</li>
<li>消息队列</li>
<li>共享内存</li>
</ol>
<ul>
<li>1，2 vs 4<ul>
<li>[1,2 进程写消息时，管道必须已经打开来读， 否则会产生SIGPIPE信号]</li>
<li>持续性不同， 管道是随进程的持续性，当管道最后一次关闭发生时，里面的数据就会丢失；而消息队列是随内核的持续性， 只要内核没有重新自举，消息队列不会被删除</li>
</ul>
</li>
</ul>
<h3 id="epoll-linux-kqueue-freebsd-iocp-windows"><a href="#epoll-linux-kqueue-freebsd-iocp-windows" class="headerlink" title="epoll(linux), kqueue(freebsd), iocp(windows)"></a>epoll(linux), kqueue(freebsd), iocp(windows)</h3><h3 id="线程池大小的阻抗匹配原则"><a href="#线程池大小的阻抗匹配原则" class="headerlink" title="线程池大小的阻抗匹配原则"></a>线程池大小的阻抗匹配原则</h3><p>p：密集计算所占的时间比重（0 &lt; p &lt;&#x3D; 1）<br>c: cpu数目<br>线程池大小的经验公式： T &#x3D; c&#x2F;p (考虑到p值的估计不是很准，T的最佳值可以上下浮动50%)</p>
<p>多线程的相关原则：<br>一个文件描述符只在一个线程中操作</p>
<h3 id="阻塞与非阻塞-x2F-x2F-同步与异步"><a href="#阻塞与非阻塞-x2F-x2F-同步与异步" class="headerlink" title="阻塞与非阻塞&#x2F;&#x2F;同步与异步"></a>阻塞与非阻塞&#x2F;&#x2F;同步与异步</h3><ol>
<li>同步与异步<br>同步和异步关注的是消息通信机制 (synchronous communication&#x2F; asynchronous communication)</li>
</ol>
<p>所谓同步，就是在发出一个<em>调用</em>时，在没有得到结果之前，该<em>调用</em>就不返回。但是一旦调用返回，就得到返回值了。<br>换句话说，就是由<em>调用者</em>主动等待这个<em>调用</em>的结果。</p>
<p>而异步则是相反，<em>调用</em> 在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em> 通过状态、通知来通知调用者，或通过回调函数处理这个调用。</p>
<ol start="2">
<li>阻塞与非阻塞</li>
</ol>
<p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态.</p>
<p>阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。<br>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。</p>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
        <tag>process/thread</tag>
      </tags>
  </entry>
  <entry>
    <title>boost随笔</title>
    <url>/2016/02/boost%E9%9A%8F%E7%AC%942016-02-04/</url>
    <content><![CDATA[<h3 id="boost源码的结构"><a href="#boost源码的结构" class="headerlink" title="boost源码的结构"></a>boost源码的结构</h3><p><img src="/images/2016/boost_source_architecture.png" alt="boost source architecture"></p>
<span id="more"></span>

<h3 id="boost"><a href="#boost" class="headerlink" title="boost"></a>boost</h3><ol>
<li>boost::enable_shared_from_this</li>
<li>boost::noncopyable</li>
</ol>
<h3 id="boost-compile"><a href="#boost-compile" class="headerlink" title="boost compile"></a>boost compile</h3><p>设定位数以及toolset<br><code>./b2.exe  --toolset=msvc-12.0 address-model=64</code></p>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
        <tag>读书笔记</tag>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql常用命令</title>
    <url>/2016/02/mysql%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A42016-02-27/</url>
    <content><![CDATA[<h3 id="连接-需安装mysql-client"><a href="#连接-需安装mysql-client" class="headerlink" title="连接(需安装mysql-client)"></a>连接(需安装mysql-client)</h3><ul>
<li><code>mysql -h主机地址 -u用户名 -p密码</code></li>
<li><code>mysql -u 用户名 -p #回车后输入密码</code></li>
</ul>
<h3 id="大小写问题"><a href="#大小写问题" class="headerlink" title="大小写问题"></a>大小写问题</h3><p>sql语句命令不区别大小写的。一些人习惯把关键词大写出来显示，方便阅读</p>
<ol>
<li>mysql在linux下数据库名、表名、列名、别名大小写规则如下</li>
</ol>
<ul>
<li>数据库名与表名是严格区分大小写的</li>
<li>表的别名是严格区分大小写的</li>
<li>列名与列的别名在所有的情况下均是忽略大小写的</li>
<li>变量名严格区分大小写</li>
</ul>
<ol start="2">
<li><p>mysql在windows下都不区分大小写</p>
</li>
<li><p>mysql配置时设置区分大小写<br>查询时设置大小写<br><code>select * from tbl_user where binary user_name=&#123;&#125;</code></p>
</li>
</ol>
<span id="more"></span>
<h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><ol>
<li>终端修改<br>刚装好mysql，root用户没有密码</li>
</ol>
<blockquote>
<p>初始设密码<br><code>mysqladmin -uroot password 123456</code><br>   改密<br><code>mysqladmin -uroot -p旧密码 password #回车输入新密码</code></p>
</blockquote>
<ol start="2">
<li>mysql命令行中修改密码</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">UPDATE</span> mysql.<span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">PASSWORD</span>(<span class="string">&#x27;新密码&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">User</span>=’root’;</span><br><span class="line">mysql&gt; FLUSH <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure>

<h3 id="忘记root密码解决办法"><a href="#忘记root密码解决办法" class="headerlink" title="忘记root密码解决办法"></a>忘记root密码解决办法</h3><ol>
<li>修改mysql登录设置<br><em><strong>修改&#x2F;etc&#x2F;mysql&#x2F;my.cnf,[mysqld]的段中加上一句：skip-grant-tables，例如：</strong></em></li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=<span class="regexp">/var/</span>lib/mysql</span><br><span class="line">socket=<span class="regexp">/var/</span>lib<span class="regexp">/mysql/my</span>sql.sock</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>重启mysql<br><code>/etc/init.d/mysql restart</code></p>
</li>
<li><p>登录mysql修改密码</p>
</li>
</ol>
<p>这时候登录mysql已经不需要密码了，修改密码即可。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="keyword">UPDATE</span> mysql.<span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">password</span>=<span class="keyword">PASSWORD</span>(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">WHERE</span> <span class="keyword">User</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">mysql&gt; FLUSH <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将mysql登录设置修改回来</li>
</ol>
<p>去掉my.cnf添加的skip-grant-tables，重启mysql</p>
<h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><ol>
<li>创建用户并赋予权限的命令 mysql&gt; grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;</li>
</ol>
<ul>
<li>权限1,权限2,…权限n代表select,insert,update,delete,create,drop,index,alter,grant,references,reload,shutdown,process,file等14个权限。</li>
<li>当权限1,权限2,…权限n被all privileges或者all代替，表示赋予用户全部权限。</li>
<li>当数据库名称.表名称被’<em>.</em>‘代替，表示赋予用户操作服务器上所有数据库所有表的权限。</li>
<li>用户地址可以是localhost，也可以是ip地址、机器名字、域名。也可以用’%’表示从任何地址连接。</li>
<li>‘连接口令’不能为空，否则创建失败。</li>
</ul>
<p>例如：创建用户test1，只能本地登录，并可对vm_db数据库进行查询，插入,修改和删除操作</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">`mysql&gt;<span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">drop</span> vm_db.* <span class="keyword">to</span> test1@localhost identified <span class="keyword">by</span> <span class="string">&#x27;test1&#x27;</span>`</span><br><span class="line"></span><br><span class="line">//如果不想test1有密码，可以在打一个命令将密码取消</span><br><span class="line">mysql&gt;<span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">drop</span> vm_db.* <span class="keyword">to</span> test1@localhost identified <span class="keyword">by</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">//刷新系统权限表</span><br><span class="line">mysql&gt;flush <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>取消权限</li>
</ol>
<p>取消test1的删除权限</p>
<p><code>mysql&gt; REVOKE DELETE on vm_db.* from test1@&#39;localhost&#39;;</code></p>
<ol start="3">
<li>修改指定用户密码</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt;<span class="keyword">update</span> mysql.<span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">password</span>=<span class="keyword">password</span>(<span class="string">&#x27;新密码&#x27;</span>) <span class="keyword">where</span> <span class="keyword">User</span>=&quot;test1&quot; <span class="keyword">and</span> Host=&quot;localhost&quot;;</span><br><span class="line">mysql&gt;flush <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>删除用户</li>
</ol>
<p>root身份登录数据库后</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt;use mysql;</span><br><span class="line">mysql&gt;<span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> <span class="keyword">User</span>=&quot;test1&quot; <span class="keyword">and</span> Host=&quot;localhost&quot;;</span><br><span class="line">mysql&gt;flush <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="增、删、改、查"><a href="#增、删、改、查" class="headerlink" title="增、删、改、查"></a>增、删、改、查</h4><ol>
<li><p>查询时间<br><code>mysql&gt;select now();</code></p>
</li>
<li><p>查询用户<br><code>mysql&gt;select user();</code></p>
</li>
<li><p>查询数据库版本<br><code>mysql&gt;select version();</code></p>
</li>
<li><p>查询当前数据库<br><code>mysql&gt;select database();</code>  &#x2F;&#x2F;输出当前使用的数据库名<br><code>mysql&gt;show databases;</code>  &#x2F;&#x2F;列出所有的数据库名<br><code>mysql&gt;use &quot;database_name&quot; </code>  &#x2F;&#x2F;指定使用的数据库</p>
</li>
<li><p>删除数据库<br><code>mysql&gt;drop database if exists vm_db;</code></p>
</li>
<li><p>创建数据库</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt;<span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> vm_db;</span><br><span class="line">mysql&gt;use vm_db;</span><br><span class="line">mysql&gt;<span class="keyword">show</span> <span class="keyword">tables</span>;</span><br><span class="line">mysql&gt;<span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> vms(<span class="type">name</span> <span class="type">varchar</span>(<span class="number">20</span>), id <span class="type">int</span>);</span><br><span class="line">//插入数据</span><br><span class="line">mysql&gt;<span class="keyword">insert</span> <span class="keyword">into</span> vms <span class="keyword">values</span>(<span class="string">&#x27;vm1&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">//更新数据</span><br><span class="line">mysql&gt;<span class="keyword">update</span> vms <span class="keyword">set</span> <span class="type">name</span>=<span class="string">&#x27;vm0&#x27;</span> <span class="keyword">where</span> id=<span class="number">1</span>;</span><br><span class="line">//复制表机构</span><br><span class="line">mysql&gt;<span class="keyword">create</span> <span class="keyword">table</span> vms1 <span class="keyword">select</span> * <span class="keyword">from</span> vms <span class="keyword">where</span> <span class="number">1</span>&lt;&gt;<span class="number">1</span>;</span><br><span class="line">//复制完整表</span><br><span class="line">mysql&gt;<span class="keyword">create</span> <span class="keyword">table</span> vms2 <span class="keyword">select</span> * <span class="keyword">from</span> vms;</span><br><span class="line">//表重命名</span><br><span class="line">mysql&gt;<span class="keyword">alter</span> <span class="keyword">table</span> vms <span class="keyword">rename</span> <span class="keyword">as</span> vms0;</span><br><span class="line">//显示表结构</span><br><span class="line">mysql&gt;describe vms0;</span><br><span class="line">//显示表记录</span><br><span class="line">mysql&gt;<span class="keyword">select</span> * <span class="keyword">from</span> vms0;</span><br><span class="line">//清空表记录</span><br><span class="line">mysql&gt;<span class="keyword">delete</span> <span class="keyword">from</span> vms0;</span><br><span class="line">//删除表</span><br><span class="line">mysql&gt;<span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> vms0;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><ol>
<li><p>备份MySQL数据库的命令<br><code>mysqldump -hhostname -uusername -ppassword databasename &gt; backupfile.sql</code></p>
</li>
<li><p>备份MySQL数据库为带删除表的格式，能够让该备份覆盖已有数据库而不需要手动删除原有数据库。<br><code>mysqldump -–add-drop-table -uusername -ppassword databasename &gt; backupfile.sql</code></p>
</li>
<li><p>直接将MySQL数据库压缩备份<br><code>mysqldump -hhostname -uusername -ppassword databasename | gzip &gt; backupfile.sql.gz</code></p>
</li>
<li><p>备份MySQL数据库某个(些)表<br><code>mysqldump -hhostname -uusername -ppassword databasename specific_table1 specific_table2 &gt; backupfile.sql</code></p>
</li>
<li><p>同时备份多个MySQL数据库<br><code>mysqldump -hhostname -uusername -ppassword --databases databasename1 databasename2 databasename3 &gt; multibackupfile.sql</code></p>
</li>
<li><p>仅仅备份数据库结构<br><code>mysqldump -hhostname -uusername -ppassword --no-data --databases databasename1 databasename2 databasename3 &gt; structurebackupfile.sql</code></p>
</li>
<li><p>备份服务器上所有数据库<br><code>mysqldump --all-databases &gt; allbackupfile.sql</code></p>
</li>
<li><p>还原MySQL数据库的命令<br><code>mysql -hhostname -uusername -ppassword databasename &lt; backupfile.sql</code></p>
</li>
<li><p>还原压缩的MySQL数据库<br><code>gunzip &lt; backupfile.sql.gz | mysql -uusername -ppassword databasename</code></p>
</li>
<li><p>将数据库转移到新服务器<br><code>mysqldump -uusername -ppassword databasename | mysql --host=*.*.*.* -C databasename</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>读书随笔</title>
    <url>/2016/05/%E8%AF%BB%E4%B9%A6%E9%9A%8F%E7%AC%942016-05-07/</url>
    <content><![CDATA[<h3 id="parallel-library"><a href="#parallel-library" class="headerlink" title="parallel library"></a>parallel library</h3><ol>
<li>microsoft’s ppl: parallel patterns library</li>
<li>intel’s tbb: threading building block</li>
</ol>
<span id="more"></span>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>clion-ide</title>
    <url>/2016/08/clion-ide-2016-08-18/</url>
    <content><![CDATA[<h3 id="打开Class"><a href="#打开Class" class="headerlink" title="打开Class"></a>打开Class</h3><ol>
<li>win： ctrl + n</li>
</ol>
<h3 id="a-symbol-usage-list-usage-in-project"><a href="#a-symbol-usage-list-usage-in-project" class="headerlink" title="a symbol [usage | list usage] in project"></a>a symbol [usage | list usage] in project</h3><ol>
<li><p>win：alt + f7 &#x2F; ctrl + alt + f7</p>
</li>
<li><p>win: highlight the usage: ctrl + shift + f7<br>win: navigate the highlighted usage: f3&#x2F;shift + f3<br>win: remove the highlight: esc</p>
</li>
</ol>
<h3 id="go-to-the-definition"><a href="#go-to-the-definition" class="headerlink" title="go to the definition"></a>go to the definition</h3><ol>
<li>win: go to just on definition or several definitions: ctrl + b | ctrl + alt + b</li>
</ol>
<span id="more"></span>
<h3 id="quickly-view-the-definition"><a href="#quickly-view-the-definition" class="headerlink" title="quickly view the definition"></a>quickly view the definition</h3><ol>
<li>win: quickly view: ctrl + shift + i</li>
</ol>
<h3 id="in-method-parentheses-get-the-params-tip"><a href="#in-method-parentheses-get-the-params-tip" class="headerlink" title="in method parentheses get the params tip"></a>in method parentheses get the params tip</h3><ol>
<li>win: ctrl + p</li>
</ol>
<h3 id="navigate-through-current-edited-file"><a href="#navigate-through-current-edited-file" class="headerlink" title="navigate through current edited file"></a>navigate through current edited file</h3><ol>
<li>win: ctrl + f2</li>
</ol>
<h3 id="wrap-a-code-block"><a href="#wrap-a-code-block" class="headerlink" title="wrap a code block"></a>wrap a code block</h3><ol>
<li>win: ctrl + alt + t</li>
</ol>
<h3 id="generate-code-like-constructor"><a href="#generate-code-like-constructor" class="headerlink" title="generate code like constructor"></a>generate code like constructor</h3><ol>
<li>win: alt + insert</li>
</ol>
<h3 id="override-method-and-implement-pure-method"><a href="#override-method-and-implement-pure-method" class="headerlink" title="override method and implement pure method"></a>override method and implement pure method</h3><ol>
<li>win: ctrl + o<br>win: ctrl + i</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown-usage</title>
    <url>/2016/10/markdown-rules-2016-10-07/</url>
    <content><![CDATA[<h2 id="上标和下标"><a href="#上标和下标" class="headerlink" title="上标和下标"></a>上标和下标</h2><ul>
<li><p>上标： <code>O(n&lt;sup&gt;2&lt;/sup&gt;)</code></p>
<p> 效果 O(n<sup>2</sup>)</p>
</li>
<li><p>下标: <code>O(h&lt;sub&gt;2&lt;/sub&gt;o)</code></p>
<p> 效果 O(h<sub>2</sub>o)</p>
</li>
</ul>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><ul>
<li>语法: <code>![the name to show](the path of the image)</code><br><img src="/images/2016/boost_source_architecture.png" alt="boost source architecture"><span id="more"></span></li>
</ul>
<h2 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h2><ul>
<li>语法: <code>[linker name](the site address)</code></li>
</ul>
<h2 id="插入文章链接"><a href="#插入文章链接" class="headerlink" title="插入文章链接"></a>插入文章链接</h2><ul>
<li>语法: <code>&#123;% post_link post_name_in_posts_dir %&#125;</code></li>
</ul>
<h2 id="加粗-x2F-斜体"><a href="#加粗-x2F-斜体" class="headerlink" title="加粗&#x2F;斜体"></a>加粗&#x2F;斜体</h2><ul>
<li>加粗: <strong>the content</strong></li>
<li>斜体: <em>the content</em></li>
</ul>
<h2 id="mathjax"><a href="#mathjax" class="headerlink" title="mathjax"></a>mathjax</h2><ul>
<li><code>$content$</code>, 语句中的公式</li>
<li><code>$$content$$</code>,  单独居中表示的公式</li>
<li>{}  公式中的group</li>
<li>^, _  上标以及下标</li>
<li><code>\frac&#123;分子&#125;&#123;分母&#125;</code></li>
<li>空格控制: <code>\quad</code> or <code>&#123;\kern ?pt&#125;</code></li>
</ul>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><ul>
<li>行尾两个空格或多个空格或换行符</li>
<li>使用<br></li>
</ul>
<h2 id="多级有序列表"><a href="#多级有序列表" class="headerlink" title="多级有序列表"></a>多级有序列表</h2><p>下一级做两个空格的缩进</p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><ul>
<li><p>‘&gt;’<br>line or multiline reference</p>
</li>
<li><p>‘&gt;&gt;’<br>nested reference</p>
</li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 表格由 「竖线 |」、「减号 -」、「冒号 :」三种符号组成。</p>
<ul>
<li>竖线 用来定义列，每两个竖线之间为一个单元格元素；</li>
<li>减号 用来定义分割线，也就是分割表头和数据体；</li>
<li>冒号 配合减号使用，用于定义列数据的对齐属性。</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>visual_studio</title>
    <url>/2016/12/visual_studio-2016-12-07/</url>
    <content><![CDATA[<h3 id="自定义user-macro"><a href="#自定义user-macro" class="headerlink" title="自定义user macro"></a>自定义user macro</h3><ol>
<li><p>添加property sheet<br><img src="/images/2016/property_manager.png" alt="打开property manager"><br><img src="/images/2016/add_property_sheet.png" alt="添加property sheet"></p>
</li>
<li><p>打开上面创建的property sheet(.props结尾)，然后自定义user macro<br><img src="/images/2016/add_user_macro.png" alt="自定义user macro"></p>
</li>
</ol>
<span id="more"></span>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>docker&amp;virtualization</title>
    <url>/2017/01/docker&amp;virtualization-2017-01-18/</url>
    <content><![CDATA[<h3 id="设置docker加速器"><a href="#设置docker加速器" class="headerlink" title="设置docker加速器"></a>设置docker加速器</h3><ol>
<li>Docker版本为1.12或更高<br>创建或编辑&#x2F;etc&#x2F;docker&#x2F;daemon.json, 修改成如下形式：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;加速地址&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<span id="more"></span>

<ol start="2">
<li>Docker版本在1.8或1.11<br>您可以找到 Docker 配置文件（一般为&#x2F;etc&#x2F;default&#x2F;docker），不同的 Linux 发行版的配置路径不同，具体路径请参考 Docker官方文档，<br>在配置文件中的 DOCKER_OPTS 加入以下内容：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">--registry-mirror=加速地址</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>最后都重启docker服务</strong><br><code>service docker restart</code></p>
<h3 id="docker-commands"><a href="#docker-commands" class="headerlink" title="docker commands"></a>docker commands</h3><ol>
<li><p>docker images<br> 列出所有的镜像文件</p>
</li>
<li><p>docker pull  [repository][:tag]<br> 拉取镜像</p>
<p> docker search [image_name]<br> 搜索官网的镜像</p>
<p> docker tag local-image:tagname new-repo:tagname<br> docker push new-repo:tagname<br> 上传镜像</p>
</li>
<li><p>docker rm [container_id&#x2F;contaner_name]<br> 删除容器</p>
<p>docker rm  `docker ps -aq`<br> 删除所有容器</p>
</li>
<li><p>docker rmi [image_id&#x2F;image_name]<br> 删除镜像</p>
<p>docker rmi `docker images -q`<br> 删除所有镜像</p>
<p>docker rmi `docker images -f “dangling&#x3D;true” -q`<br> 删除dangling的镜像</p>
</li>
<li><p>docker ps -a<br> 列出当前运行的容器</p>
<p>docker run [-it] [image_id&#x2F;image_name] command<br> 根据镜像，创建运行容器</p>
<p>docker rename oldname newname</p>
<p>docker start [container_id&#x2F;container_name]<br>docker stop [container_id&#x2F;container_name]</p>
<p>docker stop `docker ps -q`<br>停止所有运行的容器</p>
</li>
<li><p>docker exec [-it] [container_id&#x2F;container_name]<br> 进入容器</p>
<p> exit<br> 退出容器</p>
</li>
<li><p>docker diff [container_id&#x2F;container_name]<br> 查看容器做了什么更改</p>
<p> (应该用Dockerfile来实现新的镜像的制作)<br>   docker commit [options] [container_id&#x2F;container_name] [repository][:tag]<br> 根据在容器所做的修改发布新的镜像<br> note： options， –author “wens”   –message “i add new index html”</p>
</li>
<li><p>docker build [image_name][:tag] [context path]<br> 制作镜像</p>
<p> note: context path should contain Dockerfile</p>
</li>
<li><p>docker log [container_id&#x2F;container_name]<br> 查看container的输出</p>
</li>
<li><p>docker inspect [-f “双花括号dot Id双花括号”] [container_id&#x2F;container_name]<br>查看容器的内容(只查看长Id)</p>
</li>
<li><p>[XXXX(container_name)]  env</p>
</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask</title>
    <url>/2017/02/Flask-2017-02-22/</url>
    <content><![CDATA[<h3 id="Flask-SQLAlchemy-package-Flask-SQLAlchemy-SQLAlchemy"><a href="#Flask-SQLAlchemy-package-Flask-SQLAlchemy-SQLAlchemy" class="headerlink" title="Flask-SQLAlchemy(package: Flask-SQLAlchemy, SQLAlchemy)"></a>Flask-SQLAlchemy(package: Flask-SQLAlchemy, SQLAlchemy)</h3><p>Flask-SQLAlchemy is an extension for Flask that adds support for SQLAlchemy to your application.<br>It requires SQLAlchemy 0.6 or higher</p>
<h3 id="Flask-Session"><a href="#Flask-Session" class="headerlink" title="Flask-Session"></a>Flask-Session</h3><p>Flask-Session is extension for server side session.</p>
<h3 id="Flask-jsonrpc"><a href="#Flask-jsonrpc" class="headerlink" title="Flask-jsonrpc"></a>Flask-jsonrpc</h3><p>Flask-jsonrpc is json rpc extent</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>script</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang</title>
    <url>/2017/03/Golang-2017-03-17/</url>
    <content><![CDATA[<h3 id="for-loop"><a href="#for-loop" class="headerlink" title="for loop"></a>for loop</h3><p>don’t need <code>()</code>, but always need<code>&#123;&#125;</code></p>
<ul>
<li>classic c like</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> initvaule = value; condition &lt; condition-value; endcondition&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>while like</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> condition &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ranged for</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> os.Args[<span class="number">1</span>:]&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="if-x2F-else-loop"><a href="#if-x2F-else-loop" class="headerlink" title="if&#x2F;else loop"></a>if&#x2F;else loop</h3><ul>
<li>can have init part(init part can visiable in if or else )</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> init := value; condition-expression&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ul>
<li>nomal syntax</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> expression &#123;</span><br><span class="line"><span class="keyword">case</span> condition:</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>no expression, just like <code>switch true</code></li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> condition:</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="stacking-defers"><a href="#stacking-defers" class="headerlink" title="stacking defers"></a>stacking defers</h3><p>Deferred function calls are pushed onto a stack. When a function returns, its deferred calls are executed in last-in-first-out order.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;counting&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="interface-value-amp-type-assert"><a href="#interface-value-amp-type-assert" class="headerlink" title="interface value &amp; type assert"></a>interface value &amp; type assert</h3><ol>
<li>an interface variable holds a tuple of a value and a type <code>(value, type)</code></li>
<li>x.(T)  :x is a interface and T is a tpye in interface</li>
</ol>
<h3 id="data-types"><a href="#data-types" class="headerlink" title="data types"></a>data types</h3><ul>
<li><p>basic types<br>numbers, strings, booleans</p>
</li>
<li><p>aggregate tpyes<br>arrays, structs</p>
</li>
<li><p>reference types<br>pointers, slices, maps, functions, channels</p>
</li>
</ul>
<h3 id="printf-format"><a href="#printf-format" class="headerlink" title="printf format"></a>printf format</h3><ul>
<li><p>%b, %d, %o, %x(%X)<br>十进制， 八进制， 十六进制(x大小写表明字母的大小写)</p>
</li>
<li><p>%c, %q<br>字符，带引号的字符</p>
</li>
<li><p>%g, %f, %e<br>浮点数，%e是exponent表示</p>
</li>
<li><p>%T<br>值的类型</p>
</li>
<li><p>%t<br>boolean value: true or false</p>
</li>
</ul>
<h3 id="go-goroutine-和-thread的区别"><a href="#go-goroutine-和-thread的区别" class="headerlink" title="go goroutine 和 thread的区别"></a>go goroutine 和 thread的区别</h3><ol>
<li>thread 的栈一般为2mb (固定的大小); goroutine 的栈一般为2kb, 可以动态改变</li>
<li>thread 是系统的schedule统一调度、分配，切换thread需要full context switch; goroutine拥有自己的schedule, it only concerns<br>  the goroutine of one go program(go’s schedule use a parameter <code>GOMAXPROCS</code> to determine how many OS threads be executing go code simulately; its default value is the cpus of the machine)</li>
<li>goroutine has no identity (like thread-id of threads, which thread-local storage based on it)</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireshark_rules</title>
    <url>/2017/03/Wireshark_rules-2017-03-14/</url>
    <content><![CDATA[<h3 id="ip-rule"><a href="#ip-rule" class="headerlink" title="ip rule"></a>ip rule</h3><p><code>ip.src eq 192.168.10.106 and ip.dst eq 192.168.10.106</code></p>
<span id="more"></span>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>useful commands</title>
    <url>/2017/04/useful%20commands-2017-04-28/</url>
    <content><![CDATA[<h3 id="linux添加用户的相关命令"><a href="#linux添加用户的相关命令" class="headerlink" title="linux添加用户的相关命令"></a>linux添加用户的相关命令</h3><ol>
<li><p>useradd  添加用户<br><code>useradd -d /home/wengqiang -m wengqiang -s /bin/bash</code><br>创建用户wengqiang</p>
</li>
<li><p>usermod 修改创建用户的相关属性<br><code>usermod -s /bin/sh wengqiang</code><br>修改用户wengqiang的登录shell</p>
</li>
</ol>
<p><code>usermod -aG sudo wengqiang</code><br>将用户wengqinag加入到sudo group中</p>
<ol start="3">
<li>passwd 修改用户的密码<br><code>passwd wengqiang</code></li>
</ol>
<h3 id="修改文件的owner以及group"><a href="#修改文件的owner以及group" class="headerlink" title="修改文件的owner以及group"></a>修改文件的owner以及group</h3><p><code>chown owner_name:group_name file_name</code></p>
<span id="more"></span>


<h3 id="linux-mac-产生随机串"><a href="#linux-mac-产生随机串" class="headerlink" title="linux|mac 产生随机串"></a>linux|mac 产生随机串</h3><ol>
<li>linux上 <code>cat /dev/urandom | tr -dc A-Z9 | head -c $&#123;1:-81&#125;</code></li>
<li>mac上 <code>cat /dev/urandom | LC_ALL=C tr -dc &#39;A-Z9&#39; | fold -w 81 | head -n 1</code></li>
</ol>
<h3 id="windows下验证校验码命令"><a href="#windows下验证校验码命令" class="headerlink" title="windows下验证校验码命令"></a>windows下验证校验码命令</h3><p><code>Certutil</code>(Certutil &#x2F;?)</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">certutil -hashfile xxx MD5</span><br><span class="line">certutil -hashfile xxx <span class="keyword">SHA1</span></span><br><span class="line"><span class="keyword"></span>certutil -hashfile xxx <span class="keyword">SHA256</span></span><br></pre></td></tr></table></figure>

<h3 id="获取本机ip"><a href="#获取本机ip" class="headerlink" title="获取本机ip"></a>获取本机ip</h3><p><code>curl https://ip.cn</code></p>
<h3 id="使用openssl生成secp256k1的key-pair"><a href="#使用openssl生成secp256k1的key-pair" class="headerlink" title="使用openssl生成secp256k1的key-pair"></a>使用openssl生成secp256k1的key-pair</h3><ol>
<li><p>生成<br><code>openssl ecparam -name secp256k1 -genkey -out ec-priv.pem</code></p>
</li>
<li><p>输出<br><code>openssl ec -in ec-priv.pem -text -noout</code></p>
</li>
</ol>
<h3 id="linux-磁盘相关命令"><a href="#linux-磁盘相关命令" class="headerlink" title="linux 磁盘相关命令"></a>linux 磁盘相关命令</h3><ol>
<li><p>blkid<br>列出机器上设备的uuid或label等信息</p>
</li>
<li><p>pvdisplay|pvcreate<br>显示physical volume相关信息或者创建physical volume</p>
</li>
<li><p>lvdisplay|lvcreate|vgextend vgdisplay|vgcreate|vgextend</p>
</li>
</ol>
<h3 id="clang-amp-g-显示类的内存分布"><a href="#clang-amp-g-显示类的内存分布" class="headerlink" title="clang&amp;g++显示类的内存分布"></a>clang&amp;g++显示类的内存分布</h3><p><code>clang++ -cc1 -emit-llvm -fdump-record-layouts thefile.cpp</code><br><code>g++ -fdump-class-hierarchy -c test.cpp</code></p>
<h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><ol>
<li><p>go-wrk<br>http benchmark utility<br><code>go get github.com/adjust/go-wrk</code></p>
</li>
<li><p>go tool pprof<br>get profile info of the program</p>
</li>
</ol>
<p>add following line in import part<br><code>import _ net/http/pprof</code></p>
<p><code>go tool pprof --seconds=5 localhost:8000/debug/pprof/profile</code></p>
<ol start="3">
<li>go-torch<br><code>go get github.com/uber/go-torch</code></li>
</ol>
<h3 id="检测端口是否使用"><a href="#检测端口是否使用" class="headerlink" title="检测端口是否使用"></a>检测端口是否使用</h3><ol>
<li><p>tcp port<br><code>telnet ip port</code></p>
</li>
<li><p>udp port<br><code>netcat(nc) -vnzu ip port</code></p>
</li>
</ol>
<h3 id="windows添加启动程序"><a href="#windows添加启动程序" class="headerlink" title="windows添加启动程序"></a>windows添加启动程序</h3><ol>
<li><p>用户下<br><code>win + r</code> <code>shell:startup</code> 打开当前用户的启动目录，将程序的快捷方式放入其中即可</p>
</li>
<li><p>系统下<br>“C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp”</p>
</li>
</ol>
<h3 id="安装bundle插件"><a href="#安装bundle插件" class="headerlink" title="安装bundle插件"></a>安装bundle插件</h3><ol>
<li>install Vundle.vim in …&#x2F;bundle folder</li>
<li><code>nvim +PluginInstall +qall</code></li>
</ol>
<h3 id="linux下查看c-编译后的symbols"><a href="#linux下查看c-编译后的symbols" class="headerlink" title="linux下查看c++编译后的symbols"></a>linux下查看c++编译后的symbols</h3><p><code>nm a.out | grep c++filt</code></p>
<h3 id="vim-保存时获得sudo权限"><a href="#vim-保存时获得sudo权限" class="headerlink" title="vim 保存时获得sudo权限"></a>vim 保存时获得sudo权限</h3><p><code>:w !sudo tee %</code></p>
<h3 id="查看连接的top10的用户ip"><a href="#查看连接的top10的用户ip" class="headerlink" title="查看连接的top10的用户ip"></a>查看连接的top10的用户ip</h3><p><code>netstat -nat | awk &#39;&#123;print $5&#125;&#39; | awk -F &#39;:&#39; &#39;&#123;print $1&#125;&#39; | sort | uniq -c | sort -rn | head -n 10</code></p>
<h3 id="查看最常用10个命令"><a href="#查看最常用10个命令" class="headerlink" title="查看最常用10个命令"></a>查看最常用10个命令</h3><p><code>cat .bash_history | sort | uniq -c |  sort -rn | head -n 10</code></p>
<h3 id="ubuntu下查看以及修改core-dump-location"><a href="#ubuntu下查看以及修改core-dump-location" class="headerlink" title="ubuntu下查看以及修改core dump location"></a>ubuntu下查看以及修改core dump location</h3><p><code>sysctl kernel.core_pattern</code> or <code> cat /proc/sys/kernel/core_pattern</code><br><br><code>sudo sysctl -w kernel.core_pattern=/tmp/mydumps/core_%e.%p_%t</code></p>
<h3 id="compile-gcc-missing-prerequisites"><a href="#compile-gcc-missing-prerequisites" class="headerlink" title="compile gcc[missing prerequisites]"></a>compile gcc[missing prerequisites]</h3><ol>
<li>inside the gcc source dir, download<br><code>./contrib/download_prerequisites</code></li>
<li>missing gengtype-lex.cc<br><code>sudo apt install flex</code></li>
<li>build gcc<br>&#96;&#96;</li>
</ol>
<h3 id="search-linux-shell-command-by-prefix"><a href="#search-linux-shell-command-by-prefix" class="headerlink" title="search linux shell command by prefix"></a>search linux shell command by prefix</h3><ol>
<li>ctrl + r<br><br> type <code>ctrl + r</code> then type command prefix, you can keep typing <code>ctrl + r</code> to cycle previous matching commands</li>
<li>ctrl + s<br><br> search backwards in history.</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>bitcoin</title>
    <url>/2017/05/bitcoin-2017-05-19/</url>
    <content><![CDATA[<h3 id="发明人以及相关节点时间"><a href="#发明人以及相关节点时间" class="headerlink" title="发明人以及相关节点时间"></a>发明人以及相关节点时间</h3><ol>
<li>中本聪于2008-10-31号提出了比特币的设计白皮书</li>
<li>2009年公布了最初的实现代码， 第一个比特币是2009-01-03(18:15:05)生成</li>
</ol>
<span id="more"></span>

<h3 id="secp256k1-elliptic-curve"><a href="#secp256k1-elliptic-curve" class="headerlink" title="secp256k1 elliptic curve"></a>secp256k1 elliptic curve</h3><ol>
<li><p>curve<br>$$y^2 &#x3D; x^3 + 7$$</p>
</li>
<li><p>params<br>$p &#x3D; 0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F$<br>$a &#x3D; 0$<br>$b &#x3D; 7$<br>$Gx &#x3D; 0x79BE667E F9DCBBAC 55A06295 CE870B07 029BFCDB 2DCE28D9 59F2815B 16F81798$<br>$Gy &#x3D; 0x483ADA77 26A3C465 5DA4FBFC 0E1108A8 FD17B448 A6855419 9C47D08F FB10D4B8$<br>$n &#x3D; 0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141$<br>$h &#x3D; 1$<br>in general, the different point by given an X coordinate is $2*(h + 1)$</p>
</li>
</ol>
<h3 id="private-key-amp-public-key"><a href="#private-key-amp-public-key" class="headerlink" title="private key &amp; public key"></a>private key &amp; public key</h3><ul>
<li><p>private key<br>  generally, a private key is just a 32-bytes random number</p>
</li>
<li><p>public key</p>
</li>
</ul>
<ol>
<li>uncompressed(65 bytes)<br> 0x04 + x + y</li>
<li>compressed(33 bytes, which omit the y value)<br> 0x02 or 0x03 (which means y is even or odd)</li>
</ol>
<h3 id="Elliptic-curve-finite-field-amp-ECDSA"><a href="#Elliptic-curve-finite-field-amp-ECDSA" class="headerlink" title="Elliptic curve(finite field) &amp; ECDSA"></a>Elliptic curve(finite field) &amp; ECDSA</h3><ul>
<li><p>elliptic curve: $y^2 &#x3D; x^3 + ax + b$</p>
</li>
<li><p>finite field: $F_p &#x3D; {0, 1, … p-1} $ (usually p is a prime number)</p>
<p>$n^{p-1} &#x3D; 1 mod p$ where p is prime<br>$n^{p-2} &#x3D; n^{-1} &#x3D; 1&#x2F;n mod n$ where p is prime</p>
<p>in python: it is easy to calculate $n^{-1} &#x3D; pow(n, p-2, p)$</p>
</li>
<li><p>group law</p>
<p>$P_1 &#x3D; (x_1, y_1), P_2&#x3D;(x_2, y_2) \to P_3 &#x3D; (x_3, y_3)$<br>$when x_1 \neq x_2$</p>
<p>$s &#x3D; (y_2-y_1)&#x2F;(x_2-x_1)$<br>$x_3 &#x3D; s^2 - x_1 - x_2$<br>$y_3 &#x3D; s(x_1 - x_3) - y_1$</p>
</li>
<li><p>ECDSA</p>
<ol>
<li>public key<ul>
<li>priv key: d (a randomly selected non-zero integer modulo the group order n)</li>
<li>base Pointer: G</li>
</ul>
</li>
</ol>
<p>  pub key: $P &#x3D; d * G$</p>
<ol start="2">
<li>signature<ul>
<li>hash of message to sign: e</li>
<li>chooses a per-message secret random integer k such that 1 ≤ k ≤ n − 1(n is the order of subgroup)</li>
<li>random point $RP &#x3D; k * G$</li>
</ul>
</li>
</ol>
<p>  signature: (r, s); $r&#x3D;x_{RP}$, $s&#x3D;(e+r * d)&#x2F;k$</p>
<ol start="3">
<li><p>verify signature</p>
<ul>
<li>calculate integer $i_1 &#x3D; s^{-1}*e$</li>
<li>calculate integer $i_2 &#x3D; s^{-1}*r$</li>
<li>calculate random point $RP &#x3D; i_1G + i_2P$</li>
</ul>
<p> the signature is valid only if $r &#x3D; x_{RP}$</p>
</li>
</ol>
</li>
</ul>
<h3 id="recid-secp256k1-with-ECDSA"><a href="#recid-secp256k1-with-ECDSA" class="headerlink" title="recid(secp256k1) with ECDSA"></a>recid(secp256k1) with ECDSA</h3><p>0 &lt;&#x3D; recid &lt;&#x3D; 3</p>
<p>for signature(r, s): init <code>recid = 0</code></p>
<ul>
<li>if r &gt; n (overflow),  <code>recid |= 2</code></li>
<li>if y_{r} is odd, <code>recid |= 1</code></li>
<li>if s is odd, <code>recid ^= 1</code></li>
<li>if low s, <code>recid ^= 1</code></li>
</ul>
<h3 id="signature-amp-DER-encoding"><a href="#signature-amp-DER-encoding" class="headerlink" title="signature &amp; DER encoding"></a>signature &amp; DER encoding</h3><p><a href="https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki">BIP62</a></p>
<h3 id="Hierarchical-Deterministic-Wallet"><a href="#Hierarchical-Deterministic-Wallet" class="headerlink" title="Hierarchical Deterministic Wallet"></a>Hierarchical Deterministic Wallet</h3><p><a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">BIP32</a></p>
<h3 id="pubkey-script-or-scriptPubkey-in-code"><a href="#pubkey-script-or-scriptPubkey-in-code" class="headerlink" title="pubkey script(or scriptPubkey in code)"></a>pubkey script(or scriptPubkey in code)</h3><ul>
<li><p>the output script(pubkey script) form is: <code>OP_DUP OP_HASH160 Hash160(pubkey) OP_EQUALVERIFY OP_CHECKSIG</code></p>
</li>
<li><p>the input script(signature script) form is: <code>signature  pubkey</code></p>
</li>
<li><p>the check process</p>
</li>
</ul>
<ol>
<li>the whole thing is: <code>signature pubkey OP_DUP OP_HASH160 Hash160(pubkey) OP_EQUALVERIFY OP_CHECKSIG</code></li>
<li>operate the ops on stack</li>
</ol>
<p>note: script form can see in bitcoin source code by search “CScriptVisitor”</p>
<h3 id="redeem-script"><a href="#redeem-script" class="headerlink" title="redeem script"></a>redeem script</h3><ul>
<li><p>the output script(pubkey script) form is: <code>OP_HASH160 Hash160(redeemscript) OP_EQUAL</code></p>
</li>
<li><p>the redeem script form is: <code>OP_2 pubkey1 pubkey2 pubkey2 OP_3 OP_CHECKMULTISIG</code>  &#x2F;&#x2F;2 of 3 redeem script<br>                       <code>pubkey OP_CHECKSIG</code> &#x2F;&#x2F; single redeem script</p>
</li>
<li><p>the input script(signature script) form is: <code>OP_0 sig1 sig2 redeemScript</code></p>
</li>
<li><p>the check process</p>
</li>
</ul>
<ol>
<li>the whole thing is: <code>&#123;OP_0 sig1 sig2 redeemScript&#125;_stackcopy OP_HASH160 Hash160(redeemscript) OP_EQUAL</code></li>
<li>operate the ops on stack</li>
</ol>
<h3 id="witness"><a href="#witness" class="headerlink" title="witness"></a>witness</h3><ol>
<li>native witness program(currently all is  version 0 witness)</li>
</ol>
<ul>
<li>the output script(pubkey script) form is: <code>version_byte  witness_program</code></li>
<li>the input script(signature script) is empty, which currently in winness script</li>
</ul>
<ol start="2">
<li>p2sh witness program</li>
</ol>
<ul>
<li>the output script(pubkey script) is p2sh</li>
<li>the redeem script form is: <code>version_byte witness_program</code></li>
<li>the input script(signature script) like in redeem script</li>
</ul>
<ol start="3">
<li>P2WPKH or P2WSH</li>
</ol>
<ul>
<li><p>if witness program is 20 byte</p>
<p>  it is interpreted as a pay-to-witness-public-key-hash (P2WPKH) program</p>
</li>
<li><p>if witness program is 32 byte</p>
<p>  It is interpreted as a pay-to-witness-script-hash (P2WSH) program</p>
</li>
</ul>
<h3 id="double-spend"><a href="#double-spend" class="headerlink" title="double spend"></a>double spend</h3><ul>
<li>51% attack</li>
<li>race attack</li>
<li>finney attack: attacker make a block with certain tx in advance, then create another conflict tx to network</li>
</ul>
]]></content>
      <categories>
        <category>cryptocurrency</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>blockchain -- encryption and decryption</title>
    <url>/2017/05/blockchain%20--%20encryption%20and%20decryption-2017-05-18/</url>
    <content><![CDATA[<h3 id="数字签名算法-digital-signature-algorithm"><a href="#数字签名算法-digital-signature-algorithm" class="headerlink" title="数字签名算法(digital signature algorithm)"></a>数字签名算法(digital signature algorithm)</h3><p><em>ECDSA (elliptic curve digital signature algorithm)</em><br>secp256k1(the parameters of ecdsa used in bitcoin)</p>
<ol>
<li>private key: 32 bytes(256 bit)</li>
<li>compressed or uncompressed public key: 33 bytes &#x2F; 65 bytes</li>
<li>signature or compact_signature: 72 bytes&#x2F; 65 bytes<span id="more"></span></li>
</ol>
<h3 id="derive-key-algorithm"><a href="#derive-key-algorithm" class="headerlink" title="derive key algorithm"></a>derive key algorithm</h3><ol>
<li>scrypt</li>
<li>pbkdf2</li>
</ol>
<h3 id="proof-of-stake"><a href="#proof-of-stake" class="headerlink" title="proof of stake"></a>proof of stake</h3><ol>
<li>the node(producing block) selection:<br> two most commonly used methods: ‘Randomised Block Selection’ and  ‘Coin Age Selection’</li>
</ol>
<h3 id="dpow"><a href="#dpow" class="headerlink" title="dpow"></a>dpow</h3><p><strong>also see post in <a href="/2017/05/bitcoin-2017-05-19/" title="bitcoin">bitcoin</a></strong></p>
<h3 id="DSA-amp-amp-ECDSA"><a href="#DSA-amp-amp-ECDSA" class="headerlink" title="DSA &amp;&amp; ECDSA"></a>DSA &amp;&amp; ECDSA</h3><p>both based on no generally efficient solution to solve a discrete logarithm problem</p>
<ul>
<li>DSA: discrete logarithm problem with modular exponentiation</li>
<li>ecdsa: discrete logarithm problem wiht elliptic curves</li>
</ul>
<h3 id="ECDSA-amp-amp-EdDSA"><a href="#ECDSA-amp-amp-EdDSA" class="headerlink" title="ECDSA &amp;&amp; EdDSA"></a>ECDSA &amp;&amp; EdDSA</h3><ol>
<li>using different family of elliptic curve</li>
<li>EdDSA While offering slight advantages in speed over ECDSA, its popularity comes from an improvement in security. Instead of relying on a random number for the nonce value, EdDSA generates a nonce deterministically as a hash making it collision resistant</li>
</ol>
]]></content>
      <categories>
        <category>cryptocurrency</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>metaverse</title>
    <url>/2017/05/metaverse-2017-05-27/</url>
    <content><![CDATA[<h3 id="block头中的block-hash"><a href="#block头中的block-hash" class="headerlink" title="block头中的block_hash"></a>block头中的block_hash</h3><p>byte_array&lt;32&gt; hash_digest</p>
<h3 id="UXTO"><a href="#UXTO" class="headerlink" title="UXTO"></a>UXTO</h3><p>unspent transaction output</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>cryptocurrency</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>screen memo</title>
    <url>/2017/05/screen%20memo-2017-05-05/</url>
    <content><![CDATA[<h3 id="创建screen"><a href="#创建screen" class="headerlink" title="创建screen"></a>创建screen</h3><p><code>screen</code><br><code>screen -S  &quot;new screen name&quot;</code></p>
<p>note: 创建新的screen窗口</p>
<h3 id="连接上detach的screen"><a href="#连接上detach的screen" class="headerlink" title="连接上detach的screen"></a>连接上detach的screen</h3><p><code>screen -r screen-id/thread-id</code></p>
<p>note: 默认用screen不带参数生成的窗口的前面的数字screen id也就是thread id</p>
<h3 id="连接上attached的screen"><a href="#连接上attached的screen" class="headerlink" title="连接上attached的screen"></a>连接上attached的screen</h3><p><code>screen -x screen-id/thread-id</code></p>
<h3 id="detach一个窗口以及kill一个窗口"><a href="#detach一个窗口以及kill一个窗口" class="headerlink" title="detach一个窗口以及kill一个窗口"></a>detach一个窗口以及kill一个窗口</h3><p><code>ctrl-a + d</code>: detach a window<br><code>ctrl-a + k</code>: kill a window</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake备忘</title>
    <url>/2017/11/cmake%E5%A4%87%E5%BF%98-2017-11-03/</url>
    <content><![CDATA[<h3 id="获取文件夹下的所有文件"><a href="#获取文件夹下的所有文件" class="headerlink" title="获取文件夹下的所有文件"></a>获取文件夹下的所有文件</h3><ol>
<li><code>aux_source_directory(&lt;dir&gt;, &lt;variable&gt;)</code><br> collects the names of all source files in the specified directory and store the list in the variable provided.</li>
</ol>
  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="constructor">AUX_SOURCE_DIRECTORY(<span class="params">libraries</span><span class="operator">/</span><span class="params">api</span> API_SRC)</span></span><br><span class="line"><span class="constructor">AUX_SOURCE_DIRECTORY(<span class="params">libraries</span><span class="operator">/</span><span class="params">net</span> NET_SRC)</span></span><br><span class="line"><span class="constructor">AUX_SOURCE_DIRECTORY(<span class="params">libraries</span><span class="operator">/</span><span class="params">rpc</span> RPC_SRC)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ol start="2">
<li><code>file(GLOB &lt;variable&gt;  [&lt;globbing-expressions&gt;...])</code><br> generate a list of files that match <globbing-expressions> and store it in variable.</li>
</ol>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span>( GLOB LEVEL_DB_SOURCES <span class="string">&quot;$&#123;LEVEL_DB_DIR&#125;/db/*.cc&quot;</span></span><br><span class="line">	                        <span class="string">&quot;$&#123;LEVEL_DB_DIR&#125;/helpers/memenv/memenv.cc&quot;</span></span><br><span class="line">	                        <span class="string">&quot;$&#123;LEVEL_DB_DIR&#125;/table/*.cc&quot;</span></span><br><span class="line">	                        <span class="string">&quot;$&#123;LEVEL_DB_DIR&#125;/util/*.cc&quot;</span> )</span><br><span class="line"><span class="keyword">foreach</span>( filename <span class="variable">$&#123;LEVEL_DB_SOURCES&#125;</span> )</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$&#123;filename&#125;</span> <span class="keyword">MATCHES</span> <span class="string">&quot;.*_test.cc&quot;</span> <span class="keyword">OR</span> <span class="variable">$&#123;filename&#125;</span> <span class="keyword">MATCHES</span> <span class="string">&quot;.*_bench.cc&quot;</span> <span class="keyword">OR</span> <span class="variable">$&#123;filename&#125;</span> <span class="keyword">MATCHES</span> <span class="string">&quot;.*_main.cc&quot;</span> )</span><br><span class="line">        <span class="keyword">list</span>( REMOVE_ITEM LEVEL_DB_SOURCES <span class="variable">$&#123;filename&#125;</span> )</span><br><span class="line">    <span class="keyword">endif</span>()</span><br><span class="line"><span class="keyword">endforeach</span>()</span><br></pre></td></tr></table></figure>


<h3 id="执行-内嵌-目录下的CMakeList-txt"><a href="#执行-内嵌-目录下的CMakeList-txt" class="headerlink" title="执行(内嵌)目录下的CMakeList.txt"></a>执行(内嵌)目录下的CMakeList.txt</h3><p><code>include(path\CMakeList.txt)</code></p>
<h3 id="获取路径信息-x2F-文件名信息"><a href="#获取路径信息-x2F-文件名信息" class="headerlink" title="获取路径信息&#x2F;文件名信息"></a>获取路径信息&#x2F;文件名信息</h3><p><code>get_filenamecomponent(&lt;VAR&gt; &lt;FileName&gt; &lt;COMP&gt; [CACHE])</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">get_filenamecomponent</span><span class="params">(dir <span class="string">&quot;$&#123;CMAKE_CURRENT_LIST_FILE&#125;&quot;</span> PATH)</span></span></span><br><span class="line"><span class="function"><span class="title">set</span><span class="params">(SRCS $&#123;dir&#125;/special.c)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="信息的输出"><a href="#信息的输出" class="headerlink" title="信息的输出"></a>信息的输出</h3><ol>
<li><code>message([&lt;mode&gt;] &quot;messages to display&quot;  ...)</code></li>
</ol>
<h3 id="添加include以及lib"><a href="#添加include以及lib" class="headerlink" title="添加include以及lib"></a>添加include以及lib</h3><ul>
<li>impact on directory scope</li>
</ul>
<ol>
<li><code>include_directories(path...)</code> </li>
<li><code>link_libraries(path...)</code></li>
</ol>
<ul>
<li>only impact on target</li>
</ul>
<ol>
<li><code>target_include_directories()</code></li>
<li><code>target_link_libraries()</code></li>
</ol>
<h3 id="匹配编译器"><a href="#匹配编译器" class="headerlink" title="匹配编译器"></a>匹配编译器</h3><p><code>CMAKE_[language]_COMPILER_ID</code></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(CMAKE_CXX_COMPILER_ID <span class="keyword">STREQUAL</span> <span class="string">&quot;Clang&quot;</span>)</span><br><span class="line">    commands</span><br><span class="line"><span class="keyword">endif</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>shadowsocks安装</title>
    <url>/2017/11/shadowsocks%E5%AE%89%E8%A3%85-2017-11-10/</url>
    <content><![CDATA[<h2 id="shadowsocks-libev-版本安装"><a href="#shadowsocks-libev-版本安装" class="headerlink" title="shadowsocks-libev 版本安装"></a>shadowsocks-libev 版本安装</h2><h3 id="centos-7-64-系统"><a href="#centos-7-64-系统" class="headerlink" title="centos 7(64) 系统"></a>centos 7(64) 系统</h3><ul>
<li><p>前提准备</p>
<p>  安装一些必要的软件以及依赖</p>
  <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> git vim wget -y</span><br><span class="line">yum <span class="keyword">install</span> epel-release -y</span><br><span class="line">yum <span class="keyword">install</span> gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto udns-devel libev-devel mbedtls-devel -y</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<ul>
<li><p>下载shadowsocks-libev源码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/shadowsocks/</span>shadowsocks-libev.git</span><br><span class="line">cd shadowsocks-libev</span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始进行编译</p>
<ol>
<li>安装依赖libsodium 和 MbedTLS</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LIBSODIUM_VER=1.0.13</span><br><span class="line">wget https://download.libsodium.org/libsodium/releases/libsodium-<span class="variable">$LIBSODIUM_VER</span>.tar.gz</span><br><span class="line">tar xvf libsodium-<span class="variable">$LIBSODIUM_VER</span>.tar.gz</span><br><span class="line"><span class="built_in">pushd</span> libsodium-<span class="variable">$LIBSODIUM_VER</span></span><br><span class="line">./configure --prefix=/usr &amp;&amp; make</span><br><span class="line">make install</span><br><span class="line"><span class="built_in">popd</span></span><br><span class="line">ldconfig</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> MBEDTLS_VER=2.6.0</span><br><span class="line">wget https://tls.mbed.org/download/mbedtls-<span class="variable">$MBEDTLS_VER</span>-gpl.tgz</span><br><span class="line">tar xvf mbedtls-<span class="variable">$MBEDTLS_VER</span>-gpl.tgz</span><br><span class="line"><span class="built_in">pushd</span> mbedtls-<span class="variable">$MBEDTLS_VER</span></span><br><span class="line">make SHARED=1 CFLAGS=-fPIC</span><br><span class="line">sudo make DESTDIR=/usr install</span><br><span class="line"><span class="built_in">popd</span></span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编译shadowsocks-libev</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./autogen.sh &amp;&amp; ./configure --prefix=/usr &amp;&amp; make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/etc/</span>shadowsocks-libev</span><br><span class="line">vim <span class="regexp">/etc/</span>shadowsocks-libev/config.json</span><br></pre></td></tr></table></figure>

<p>config.json 内容如下</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"> &#123;</span><br><span class="line"><span class="string">&quot;server&quot;</span>:[<span class="string">&quot;[::0]&quot;</span>,<span class="string">&quot;0.0.0.0&quot;</span>],</span><br><span class="line"><span class="string">&quot;server_port&quot;</span>:自定端口号,</span><br><span class="line"><span class="string">&quot;local_port&quot;</span>:<span class="number">1080</span>,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;自定密码&quot;</span>,</span><br><span class="line"><span class="string">&quot;timeout&quot;</span>:<span class="number">60</span>,</span><br><span class="line"><span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-gcm&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>设置开机启动</p>
<p><code>vi /etc/systemd/system/shadowsocks.service</code></p>
<p>shadowsocks.service 内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Shadowsocks Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/ss-server -c /etc/shadowsocks-libev/config.json -u</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-abort</span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure>

<p><code>systemctl enable shadowsocks</code></p>
</li>
<li><p>shadowsocks服务的启动 &amp; 停止 &amp; 更新</p>
<ol>
<li>如果centos开启了防火墙(firewalld), 我们还不能通过外网访问服务器，因为防火墙并没有开启相应的端口</li>
</ol>
<p>  添加相应的端口<br>  <code>vi /etc/firewalld/zones/public.xml</code></p>
<p>  添加如下行:<br>  <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;port <span class="attribute">protocol</span>=<span class="string">&quot;tcp&quot;</span> <span class="attribute">port</span>=<span class="string">&quot;服务器端口&quot;</span>/&gt;</span><br><span class="line">&lt;port <span class="attribute">protocol</span>=<span class="string">&quot;udp&quot;</span> <span class="attribute">port</span>=<span class="string">&quot;服务器端口&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></p>
<p>  使规则生效<br>  <code>firewall-cmd --complete-reload</code></p>
<ol start="2">
<li><p>启动<br>  <code>systemctl start shadowsocks</code></p>
</li>
<li><p>停止<br>  <code>systemctl stop shadowsocks</code></p>
</li>
<li><p>重启<br>  <code>systemctl restart shadowsocks</code></p>
</li>
<li><p>查看状态<br>  <code>systemctl status shadowsocks</code></p>
</li>
<li><p>更新</p>
</li>
</ol>
<ul>
<li><p>先停止ss服务<br><code>systemctl stop shadowsocks</code></p>
</li>
<li><p>切换到shadowsocks-libev目录</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">git pull</span><br><span class="line">./configure</span><br><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br><span class="line"></span><br><span class="line">systemctl start shadowsocks</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>ethereum</title>
    <url>/2017/12/ethereum-2017-12-25/</url>
    <content><![CDATA[<h3 id="docker中运行ethereum-go节点"><a href="#docker中运行ethereum-go节点" class="headerlink" title="docker中运行ethereum go节点"></a>docker中运行ethereum go节点</h3><ol>
<li>安装ethereum(go version)的docker</li>
</ol>
<p>  <code>docker pull ethereum:client-go</code></p>
<ol start="2">
<li>运行docker</li>
</ol>
<p>  <code>sudo docker run -d --name wens-geth -v /mnt/main/wq/ethereum:/root/.ethereum -p 8588:8545 -p 30308:30303  ethereum/client-go --rpc --rpcaddr 0.0.0.0 --syncmode &quot;fast&quot; --cache=10240 --txpool.pricelimit 1  console </code></p>
<ol start="3">
<li>进入运行着的docker go节点</li>
</ol>
<p>  <code>sudo docker run -it -v  /mnt/main/wq/ethereum:/root/.ethereum ethereum/client-go attach </code></p>
<span id="more"></span>
]]></content>
      <categories>
        <category>cryptocurrency</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>solidity学习</title>
    <url>/2017/12/solidity%E5%AD%A6%E4%B9%A0-2017-12-04/</url>
    <content><![CDATA[<span id="more"></span>


<p>contract creation transaction: the target account address is 0. the payload of such transaction is taken to be EVM bytecode and executed.The output of this execution is permanently stored as the code of the contract</p>
<p>each account has its own persistant memory area called storage.</p>
<p>the second memory area is called memory, of which a contract obtains a freshly cleared instance for each message call.</p>
<p>EVM is not a register machine but a stack machine.</p>
<p>Calls are limited to a depth of 1024.</p>
<h3 id="library"><a href="#library" class="headerlink" title="library"></a>library</h3><p>use the feature delegatecall: the contract can call the code of target address</p>
<h3 id="fallback-function"><a href="#fallback-function" class="headerlink" title="fallback function"></a>fallback function</h3><ol>
<li><p>A contract can have exactly one unnamed function. This function cannot have arguments and cannot return anything. It is executed on a call to the contract if none of the other functions match the given function identifier (or if no data was supplied at all).</p>
</li>
<li><p>Furthermore, this function is executed whenever the contract receives plain Ether (without data). Additionally, in order to receive Ether, the fallback function must be marked <code>payable</code>.</p>
</li>
<li><p>If no such function exists, the contract cannot receive Ether through regular transactions.</p>
</li>
<li><p>Please ensure you test your fallback function thoroughly to ensure the execution cost is less than 2300 gas before deploying a contract.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>cryptocurrency</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>bitcoin-segwit-learning</title>
    <url>/2018/05/bitcoin-segwit-learning-2018-05-15/</url>
    <content><![CDATA[<h2 id="segwit相关"><a href="#segwit相关" class="headerlink" title="segwit相关"></a>segwit相关</h2><h3 id="segwit-bips"><a href="#segwit-bips" class="headerlink" title="segwit bips"></a>segwit bips</h3><p>see <a href="https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki">bitcoin bip141</a><br>    <a href="https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki">bitcoin bip143</a><br>    <a href="https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki">bitcoin bip144</a><br>    <a href="https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki">bitcoin bip147</a><br>    (chain activated on August 24, 2017)</p>
<h3 id="block-cost-calculation"><a href="#block-cost-calculation" class="headerlink" title="block cost calculation"></a>block cost calculation</h3><pre><code>cost = (stripped_size * 4) + witness_size formula,
using only serialization with and without witness data. As witness_size
is equal to total_size - stripped_size, this formula is identical to:
cost = (stripped_size * 3) + total_size.
</code></pre>
]]></content>
      <categories>
        <category>cryptocurrency</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>math_in_programming</title>
    <url>/2018/05/math-in-programming-2018-05-09/</url>
    <content><![CDATA[<h3 id="conditional-probablity"><a href="#conditional-probablity" class="headerlink" title="conditional probablity"></a>conditional probablity</h3><p>P(A|B) &#x3D;  P(A ∩ B) &#x2F; P(B)</p>
<p>The conditional probability  means “what is the probability of event A given that we know event B occurred”</p>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记golang</title>
    <url>/2018/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0golang-2018-07-07/</url>
    <content><![CDATA[<h3 id="go-grammer"><a href="#go-grammer" class="headerlink" title="go grammer"></a>go grammer</h3><ol>
<li><p>the standard Go compiler and gccgo both don’t allow local variables declared but not used. Package-level variables have no such limit.<br>If a local variable is only ever used as destination values, it will also be viewed as unused.</p>
</li>
<li><p>Overflows are not allowed for typed constant values but are allowed for non-constant and untyped constant values.</p>
<ul>
<li>Non-constant integer values can be converted to strings.</li>
<li>Non-constant floating-point and integer values can be explicitly converted to any other floating-point and integer types.</li>
<li>Non-constant complex values can be explicitly converted to any other complex types.</li>
</ul>
</li>
<li><p>The name of the folder of a package is not required to be the same as the package name. However, for a library package, it will make package users confused if the name of the package is different from the name of the folder of the package.</p>
</li>
<li><ul>
<li>A package-level variable is initialized after all of its depended variables.</li>
<li>All package-level variables declared in a package are initialized before any <code>init</code> function declared in the same package is invoked.</li>
<li>All init functions in all involved packages in a program will be invoked sequentially. An init function in an importing package will be invoked after all the init functions declared in the dependency packages of the importing package for sure. All init functions will be invoked before invoking the main entry function.</li>
</ul>
</li>
<li><p>The expressions enclosed within the body of an anonymous function call, whether the call is a general call or a deferred&#x2F;goroutine call, will not be evaluated at the moment when the anonymous function call is invoked.</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;a:&quot;</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">  fmt.Println()</span><br><span class="line">  <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;b:&quot;</span>, i)</span><br><span class="line">      &#125;()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output is:  a: 2<br>        a: 1<br>        a: 0<br><br>        b: 3<br>        b: 3<br>        b: 3<br>to get b: 2, b: 1, b: 0</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">      <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;b:&quot;</span>, i)</span><br><span class="line">      &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;()</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="go-数组大小不能超过2GB"><a href="#go-数组大小不能超过2GB" class="headerlink" title="go 数组大小不能超过2GB"></a>go 数组大小不能超过2GB</h3><p>需要针对数组元素的类型大小计算数组的最大长度范围 ([]uint8 最大2GB， []uint16 最大1GB，以此类推)，但是 []struct{} 数组的长度可以超过2GB</p>
<h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><ol>
<li>首先系统级的线程创建会创建默认大小的栈(一般默认可能为2Mb)，主要用于保存递归函数调用的参数以及局部变量，默认大小的栈存在可能空间浪费或者栈不足的问题；而goroutine采用可以动态增减的栈，初始创建栈大小为(2kb或者4kb)，根据需要动态增减（主流实现的栈大小可以达到1gb）<span id="more"></span></li>
</ol>
<h3 id="阻塞线程，延迟退出"><a href="#阻塞线程，延迟退出" class="headerlink" title="阻塞线程，延迟退出"></a>阻塞线程，延迟退出</h3><ol>
<li><code>select&#123;&#125;</code></li>
<li><code>for &#123;&#125;</code></li>
<li><code>&lt;- make(chan bool)</code></li>
</ol>
<p>如果是main函数线程阻塞，正常退出需要调用os.Exit(0)进行退出</p>
<h3 id="生成cgo中间文件"><a href="#生成cgo中间文件" class="headerlink" title="生成cgo中间文件"></a>生成cgo中间文件</h3><p><code>go tool cgo yourfile.go</code><br>会生成一个_obj目录包含相关的中间文件</p>
<h3 id="go生成c函数，用于c语言调用"><a href="#go生成c函数，用于c语言调用" class="headerlink" title="go生成c函数，用于c语言调用"></a>go生成c函数，用于c语言调用</h3><p><code>go build -buildmode=c-archive -o sum.a sum.go</code><br>将sum.go中的c导出函数生成sum.a以及sum.h文件</p>
<h3 id="defer-amp-panic-amp-recover"><a href="#defer-amp-panic-amp-recover" class="headerlink" title="defer &amp; panic &amp; recover"></a>defer &amp; panic &amp; recover</h3><p><a href="https://blog.golang.org/defer-panic-and-recover">defer|panic|recover</a></p>
<ul>
<li>defer</li>
</ul>
<p>A defer statement pushes a function call onto a list. The list of saved calls is executed after the surrounding function returns.</p>
<ol>
<li>A deferred function’s arguments are evaluated when the defer statement is evaluated.</li>
<li>Deferred function calls are executed in Last In First Out order after the surrounding function returns.</li>
<li>Deferred functions may read and assign to the returning function’s named return values; deferred functions can modify named return values.</li>
</ol>
<ul>
<li>recover</li>
</ul>
<ol>
<li>Recover is only useful inside deferred functions. During normal execution, a call to recover will return nil and have no other effect.</li>
<li>When panic is called, it immediately stops execution of the current function and begins unwinding the stack of the goroutine, running any deferred functions along the way; Because the only code that runs while unwinding is inside deferred functions, recover is only useful inside deferred functions</li>
</ol>
<h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><ol>
<li>nil channel</li>
</ol>
<ul>
<li>A send to a nil channel blocks forever</li>
<li>A receive from a nil channel blocks forever</li>
<li>A send to a closed channel panics</li>
<li>A receive from a closed channel returns the zero value immediately</li>
</ul>
<h3 id="cocurrency-vs-parallel"><a href="#cocurrency-vs-parallel" class="headerlink" title="cocurrency vs parallel"></a>cocurrency vs parallel</h3><ol>
<li>cocurrency is about dealing with lots of things at once.</li>
<li>parrallel is about doing lots of things at once.</li>
</ol>
<h3 id="nil-interface"><a href="#nil-interface" class="headerlink" title="nil interface"></a>nil interface</h3><p>type interface  &#x3D;&#x3D;&gt;  T, V<br>keep in mind that if any concrete value has been stored in the interface, the interface will not be nil</p>
<h3 id="assignment"><a href="#assignment" class="headerlink" title="assignment"></a>assignment</h3><ol>
<li>In a short variable declaration, all items at the left of the :&#x3D; sign must pure identifiers. This means some other assignable items, which will be introduced in other articles, can’t appear at the left of :&#x3D;. These items include qualified identifiers, container elements, pointer dereferences and struct field selectors.</li>
</ol>
<h3 id="slice-operations"><a href="#slice-operations" class="headerlink" title="slice operations"></a>slice operations</h3><ol>
<li>clone<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">clone := <span class="built_in">append</span>(s[:<span class="number">0</span>:<span class="number">0</span>], s...)</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="reset-some-contiguous-elements-in-array-or-slice"><a href="#reset-some-contiguous-elements-in-array-or-slice" class="headerlink" title="reset some contiguous elements in array or slice"></a>reset some contiguous elements in array or slice</h3><ul>
<li>memcls(following range for will optimized by go compiler to <code>memcls</code> internal call)<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line">	a[i] = t0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="efficiently-and-perfectly-clone-a-slice"><a href="#efficiently-and-perfectly-clone-a-slice" class="headerlink" title="efficiently and perfectly clone a slice"></a>efficiently and perfectly clone a slice</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">clone := <span class="built_in">append</span>(a[:<span class="number">0</span>:<span class="number">0</span>], a...)</span><br></pre></td></tr></table></figure>

<h3 id="cgo-相关"><a href="#cgo-相关" class="headerlink" title="cgo 相关"></a>cgo 相关</h3><ol>
<li><p>cgo中间文件生成<br><img src="/images/2018/cgo%E6%96%87%E4%BB%B6%E7%94%9F%E6%88%90.png" alt="cgo中间文件"></p>
</li>
<li><p>cgo调用流程<br><img src="/images/2018/cgo%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B.png" alt="cgo调用流程"></p>
</li>
</ol>
<h3 id="interface-conclusion"><a href="#interface-conclusion" class="headerlink" title="interface conclusion"></a>interface conclusion</h3><ol>
<li>interface provide:</li>
</ol>
<ul>
<li>generic algorithms</li>
<li>hidden implementation</li>
<li>interception points</li>
</ul>
<ol start="2">
<li>implicit satisfication</li>
</ol>
<ul>
<li>break dependencies</li>
</ul>
<ol start="3">
<li>type assertion</li>
</ol>
<ul>
<li>to extend behaviors</li>
<li>to classify errors</li>
<li>to maintain compatibility</li>
</ul>
<h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><ol>
<li><p>list current module dependency<br><code>go list -m all</code> and <code>go list -m -versions thepackage</code></p>
</li>
<li><p>clean unused dependency<br><code>go mod tidy</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu LTS安装软件</title>
    <url>/2018/08/ubuntu%20LTS%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="安转sogou输入法"><a href="#安转sogou输入法" class="headerlink" title="安转sogou输入法"></a>安转sogou输入法</h2><h3 id="卸载ibus"><a href="#卸载ibus" class="headerlink" title="卸载ibus"></a>卸载ibus</h3><p><code>sudo apt remove ibus</code></p>
<h3 id="清除ibus配置"><a href="#清除ibus配置" class="headerlink" title="清除ibus配置"></a>清除ibus配置</h3><p><code>sudo apt purge ibus</code></p>
<span id="more"></span>

<h3 id="卸载顶部面板任务栏上的键盘指示"><a href="#卸载顶部面板任务栏上的键盘指示" class="headerlink" title="卸载顶部面板任务栏上的键盘指示"></a>卸载顶部面板任务栏上的键盘指示</h3><p><code>sudo  apt remove indicator-keyboard</code></p>
<h3 id="安装fcitx输入法框架-amp-切换为-fcitx输入法"><a href="#安装fcitx输入法框架-amp-切换为-fcitx输入法" class="headerlink" title="安装fcitx输入法框架 &amp; 切换为 fcitx输入法"></a>安装fcitx输入法框架 &amp; 切换为 fcitx输入法</h3><p><code>sudo apt install fcitx-table-wbpy fcitx-config-gtk &amp;&amp; im-config -n fcitx</code></p>
<h3 id="重启让im-config配置生效"><a href="#重启让im-config配置生效" class="headerlink" title="重启让im-config配置生效"></a>重启让im-config配置生效</h3><p><code>sudo shutdown -r now</code></p>
<h3 id="下载安装sougou输入法"><a href="#下载安装sougou输入法" class="headerlink" title="下载安装sougou输入法"></a>下载安装sougou输入法</h3><p><code>wget http://cdn2.ime.sogou.com/dl/index/1524572264/sogoupinyin_2.2.0.0108_amd64.deb?st=ryCwKkvb-0zXvtBlhw5q4Q&amp;e=1529739124&amp;fn=sogoupinyin_2.2.0.0108_amd64.deb</code><br><code>sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</code></p>
<p>若有错误，修复损坏的包<br><code>sudo apt-get install -f</code></p>
<h3 id="打开fcitx输入法配置"><a href="#打开fcitx输入法配置" class="headerlink" title="打开fcitx输入法配置"></a>打开fcitx输入法配置</h3><p>进行配置sougou输入法</p>
<h2 id="安装、更新gcc版本以及各个版本选择"><a href="#安装、更新gcc版本以及各个版本选择" class="headerlink" title="安装、更新gcc版本以及各个版本选择"></a>安装、更新gcc版本以及各个版本选择</h2><ol>
<li><p>install gcc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential</span><br><span class="line">gcc --version</span><br></pre></td></tr></table></figure>
</li>
<li><p>update apt list &amp; add gcc test repo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r/test</span><br></pre></td></tr></table></figure>
</li>
<li><p>install the needed gcc version</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install gcc-13 g++-13 -y</span><br></pre></td></tr></table></figure></li>
<li><p>handle and set serveral gcc versions</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-13 13 --slave /usr/bin/g++ g++ /usr/bin/g++-13</span><br><span class="line">sudo update-alternatives --config gcc</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>cpp温故知新(c++20)</title>
    <url>/2018/12/cpp%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0(modern%20c++)/</url>
    <content><![CDATA[<h3 id="storage-duration"><a href="#storage-duration" class="headerlink" title="storage duration"></a>storage duration</h3><ul>
<li><p><strong>automatic</strong> storage duration<br>The storage for the object is allocated at the beginning of the enclosing code block and deallocated at the end. All local objects have this storage duration, except those declared static, extern or thread_local.</p>
</li>
<li><p><strong>static</strong> storage duration<br> The storage for the object is allocated when the program begins and deallocated when the program ends. Only one instance of the object exists. All objects declared at namespace scope (including global namespace) have this storage duration, plus those declared with static or extern.</p>
</li>
<li><p><strong>thread_local</strong> storage duration<br> The storage for the object is allocated when the thread begins and deallocated when the thread ends. Each thread has its own instance of the object. Only objects declared thread_local have this storage duration. thread_local can appear together with static or extern to adjust linkage.</p>
</li>
<li><p><strong>dynamic</strong> storage duration<br>The storage for the object is allocated and deallocated per request by using dynamic memory allocation functions.</p>
</li>
</ul>
<span id="more"></span>
<h3 id="linkage"><a href="#linkage" class="headerlink" title="linkage"></a>linkage</h3><ul>
<li><p>no linkage<br>The name can be referred to only from the scope it is in.<br>variables in block scope(except extern)</p>
</li>
<li><p>static linkage<br>The name can be referred to from all scopes in the current translation unit.</p>
</li>
</ul>
<p>variable in namespace scope</p>
<ol>
<li>variabales in namespace scope declared <em>static</em></li>
<li>const-qulified(or constexpr) variable not declared extern</li>
<li>data member in anonymous unions</li>
<li>variables in anonymous namespace</li>
</ol>
<ul>
<li>external linkage<br>other variable in namespace scope</li>
</ul>
<h3 id="perfect-Forwarding"><a href="#perfect-Forwarding" class="headerlink" title="perfect Forwarding"></a>perfect Forwarding</h3><p>it used to reserve the r or l value property of a parameter in generic context.</p>
<h3 id="emplace-back-vs-push-back"><a href="#emplace-back-vs-push-back" class="headerlink" title="emplace_back vs push_back"></a>emplace_back vs push_back</h3><ol>
<li>emplace_back cannot use to initilize aggregated things.(up to c++17, it is specialized to none list in-place construction)</li>
</ol>
<h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><ol>
<li>vector vs deque<br>for small size use vector, otherwise use deque instead.</li>
</ol>
<h3 id="new-features"><a href="#new-features" class="headerlink" title="new features"></a>new features</h3><ol>
<li><p>structured binding<br>auto [res1, res2] &#x3D; …</p>
</li>
<li><p>init statement of if or switch</p>
</li>
<li><p>constexpr if</p>
</li>
<li><p>c++11 unknow before</p>
</li>
</ol>
<ul>
<li>function reload<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::string name&#123;<span class="string">&quot;wens&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">getname</span><span class="params">()</span> &amp;&amp; </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;in &amp;&amp; function\n&quot;</span>); <span class="keyword">return</span> name;&#125;</span><br><span class="line">    <span class="function"><span class="type">const</span> std::string&amp; <span class="title">getname</span><span class="params">()</span> <span class="type">const</span>&amp; </span>&#123;  <span class="built_in">printf</span>(<span class="string">&quot;in const&amp; function\n&quot;</span>); <span class="keyword">return</span> name;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Test t;</span><br><span class="line">    <span class="keyword">auto</span> v = t.<span class="built_in">getname</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">typeid</span>(v).<span class="built_in">name</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> a = Test&#123;&#125;.<span class="built_in">getname</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, <span class="built_in">typeid</span>(a).<span class="built_in">name</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="5">
<li><p>constexpr<br><br> may be available at compile-time but not guarantee<br><br>consteval<br><br> must evaluate at commpile time<br></p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">consteval</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>you cannot evaluate runtime functions at compile-time</strong></p>
</li>
<li><p>value categories</p>
</li>
</ol>
<p>expression -&gt; glvalue(generalized lvalue) and rvalue<br>glvalue -&gt; lvalue and xvalue(expiring value)<br>rvalue -&gt; xvalue and prvalue(pure rvalue)</p>
<p>simple:<br>lvalue: everything has name and string literal (identiy of an object)<br>prvalue: temporaries and other literal (perform initialization&#x2F;compute an object)<br>xvalue: value from std::move() (denote an object whose resource can be reused)<br>**glvalue produce locations, prvalue preform initialize **</p>
<p>c++17:<br>prvalue perform initialization -&gt; no temporary object yet<br>glvalue produce locations<br>materialization to get temporary object -&gt; prvalue to xvalue conversion</p>
<h3 id="lambda-funcion-vs-std-function"><a href="#lambda-funcion-vs-std-function" class="headerlink" title="lambda funcion vs std::function"></a>lambda funcion vs std::function</h3><ol>
<li>std::function cannot inline by compiler</li>
<li>when lambda with capture assigned to std::function, std::function will do heap allocation(some implementation may not heap-alloacte when less than specific threshhold)</li>
</ol>
<h3 id="sizeof-amp-alignof"><a href="#sizeof-amp-alignof" class="headerlink" title="sizeof &amp; alignof"></a>sizeof &amp; alignof</h3><ol>
<li>alignof(T) &#x3D; max(alignof(member1), alignof(member2)…)</li>
<li>sizeof(T) % alignof(T) &#x3D;&#x3D; 0</li>
</ol>
<h3 id="determine-compile-type"><a href="#determine-compile-type" class="headerlink" title="determine compile type"></a>determine compile type</h3><ol>
<li><code>_MSC_VER</code></li>
<li><code>__clang__</code></li>
<li><code>__GNUC__</code></li>
</ol>
<h3 id="copy-ellison-for-initialization-from-temporaries-prvalues-is-required-in-c-17"><a href="#copy-ellison-for-initialization-from-temporaries-prvalues-is-required-in-c-17" class="headerlink" title="copy ellison for initialization from temporaries(prvalues) is required in c++17"></a>copy ellison for initialization from temporaries(prvalues) is required in c++17</h3><p>callable copy&#x2F;move constructor no longer required</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Test</span>() = <span class="keyword">default</span>;</span><br><span class="line">  <span class="comment">//no copy/move constructor</span></span><br><span class="line">  <span class="built_in">Test</span>(<span class="type">const</span> Test&amp; ) = <span class="keyword">delete</span>;</span><br><span class="line">  <span class="built_in">Test</span>(Test&amp;&amp; ) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">(Test t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">foo</span>( <span class="built_in">Test</span>() ) <span class="comment">//is ok in c++17</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="auto-decays"><a href="#auto-decays" class="headerlink" title="auto decays"></a>auto decays</h3><ol>
<li>raw arrays convert to pointers</li>
<li>functions convert to function pointers</li>
<li>top-level references are removed</li>
<li>top-level const&#x2F;volatile are removed</li>
</ol>
<h3 id="initialization"><a href="#initialization" class="headerlink" title="initialization {}"></a>initialization {}</h3><ul>
<li><p>to pass mutiple parameters to ordinary constructors<br>different types ok</p>
</li>
<li><p>as an std::initializer_list&lt;&gt;<br>must be homogeneous(same types or can conversion to the same type)<br>only for {}</p>
</li>
<li><p>() initialization for ordinary constructor only<br>{} initialization for all constructors</p>
<ol>
<li>std::initialization_list&lt;&gt; constructors has higher priority</li>
<li>but the default constructor has the highest priority</li>
</ol>
</li>
<li><p>to aggregate object wiht initializer list{}, member is value initiaized<br>without any initializer list and no default member initialization, then uninitialized</p>
</li>
</ul>
<h3 id="enum-initializaiont-with-integer"><a href="#enum-initializaiont-with-integer" class="headerlink" title="enum initializaiont with integer"></a>enum initializaiont with integer</h3><ol>
<li>only with direct list initialization</li>
<li>if the enum has fixed underlying type</li>
<li>since c++17</li>
</ol>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="symbol">Salution</span>&#123;mr, ms&#125;;</span><br><span class="line"></span><br><span class="line">Salution s&#123;<span class="number">17</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="uniform-initialization-is-not-quite-work-with-atomic-and-assert-maybe-fixed-int-c-20"><a href="#uniform-initialization-is-not-quite-work-with-atomic-and-assert-maybe-fixed-int-c-20" class="headerlink" title="uniform initialization is not quite work with atomic and assert(maybe fixed int c++20)"></a>uniform initialization is not quite work with atomic and assert(maybe fixed int c++20)</h3><ol>
<li>atomic</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//with P0883 maybe fixed in c++20</span></span><br><span class="line">std::atomic&lt;<span class="type">int</span>&gt; x1;    <span class="comment">//does zero initialize</span></span><br><span class="line">std::atomic&lt;<span class="type">int</span>&gt; x2&#123;&#125;;  <span class="comment">//does not zero initialize</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">counter</span> &#123;</span><br><span class="line">   <span class="type">int</span> external_counter = <span class="number">0</span>;</span><br><span class="line">   <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::atomic&lt;counter&gt; c1; <span class="comment">//does not initialize with 0 and 1</span></span><br><span class="line">std::atomic&lt;counter&gt; c2; <span class="comment">//does also not initialize with 0 and 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>assert<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">assert</span>(c == std::<span class="built_in">complex</span>(<span class="number">0</span>, <span class="number">0</span>)); <span class="comment">//ok</span></span><br><span class="line"><span class="built_in">assert</span>(c == std::complex&#123;<span class="number">0</span>, <span class="number">0</span>&#125;); <span class="comment">//does not compile</span></span><br><span class="line"><span class="built_in">assert</span>((c == std::complex&#123;<span class="number">0</span>, <span class="number">0</span>&#125;)); <span class="comment">//ok</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="compiler-related"><a href="#compiler-related" class="headerlink" title="compiler related"></a>compiler related</h3><ol>
<li>registers<br>rax(64) -&gt;  eax(32) -&gt; ax(16) -&gt; ah(8) and al(8) (left bits zeroed)</li>
</ol>
<p><code>rax</code>: return value<br><code>rdi</code>: 1st param<br><code>rsi</code>: 2nd param</p>
<ol start="2">
<li>Underscore <code>(_)</code> is special, as C++ reserves the following to be used by the compiler and the standard library</li>
</ol>
<ul>
<li>any identifier that starts with an <code>_</code> followed by an upper-case letter, and</li>
<li>any identifier that contains two consecutive underscores <code>(i.e. __)</code> anywhere in its name</li>
</ul>
<ol start="3">
<li>platform judge<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_WIN32)</span></span><br><span class="line"><span class="comment">/* we&#x27;re on windows */</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(__GNUC__) &amp;&amp; !defined(__clang__)</span></span><br><span class="line"><span class="comment">/* we&#x27;re on gcc ! */</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(__clang__)</span></span><br><span class="line"><span class="comment">/* we&#x27;re on clang */</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">/* ¯\_(ツ)_/¯ */</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="practical-performance-practices"><a href="#practical-performance-practices" class="headerlink" title="practical performance practices"></a>practical performance practices</h3><ol>
<li>const &amp; initialize</li>
</ol>
<ul>
<li>always const</li>
<li>always initialize</li>
<li>use IIFE can help you initialize</li>
<li>don’t recalculate values that can be calculated once</li>
</ul>
<ol start="2">
<li>list vs vector vs array vs containers</li>
</ol>
<ul>
<li>always prefer std::array</li>
<li>then std::vector</li>
</ul>
<ol start="3">
<li>others</li>
</ol>
<ul>
<li>avoid object copying</li>
<li>avoid automatic conversion: using conversion explicit</li>
<li>don’t pass smart pointers</li>
<li>avoid std::endl</li>
<li>prefer return std::unique_ptr<T> to std::shared_ptr<T></li>
</ul>
<h3 id="shared-ptr-thread-safe"><a href="#shared-ptr-thread-safe" class="headerlink" title="shared_ptr thread safe"></a>shared_ptr thread safe</h3><ol>
<li><a href="https://www.modernescpp.com/index.php/atomic-smart-pointers">atomic smart pointers</a></li>
</ol>
<h3 id="spinlock"><a href="#spinlock" class="headerlink" title="spinlock"></a>spinlock</h3><ul>
<li>in user mode or general application mode, you should avoid spinlock.</li>
<li>in kernel mode(low-level stuff), you only hold the lock about several instructions and latency is important,<br>a spinlock maybe better solution than a lock.</li>
</ul>
<h3 id="c-17-amp-c-20-new-features"><a href="#c-17-amp-c-20-new-features" class="headerlink" title="c++17&amp;c++20 new features"></a>c++17&amp;c++20 new features</h3><ul>
<li><p>c++17<br>fold expressions, typename in template parameters, auto for non-type template parameter, class template argument deduction<br>inline variable(constexpr imply inline now), nested namespace</p>
</li>
<li><p>c++20<br>template lambdas, string literals as non-type template parameters, constrains(template requires), concepts</p>
</li>
</ul>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>llvm&amp;clang 源码编译</title>
    <url>/2019/01/llvm&amp;clang%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h3 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h3><ol>
<li><code>git clone https://github.com/llvm/llvm-project.git</code></li>
</ol>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ol>
<li>config&amp;compile<br>see <a href="http://llvm.org/docs/GettingStarted.html#id4">llvm GettingStarted</a></li>
</ol>
<ul>
<li>可能缺少的库<br><code>sudo apt install swig libedit-dev libxml2-dev ocaml python-pygments python-yaml doxygen</code></li>
</ul>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>v2ray安装</title>
    <url>/2019/01/v2ray%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="centos-7-64-系统"><a href="#centos-7-64-系统" class="headerlink" title="centos 7(64) 系统"></a>centos 7(64) 系统</h3><ol>
<li>防火墙</li>
</ol>
<ul>
<li><p>查看防火墙是否开启<br><code>firewall-cmd --state</code></p>
</li>
<li><p>重载防火墙,使新规则生效<br><code>firewall-cmd --complete-reload</code></p>
</li>
<li><p>查看打开的端口<br><code>firewall-cmd --list-ports</code></p>
</li>
<li><p>启动&amp;停止 防火墙<br><code>sytemctl start firewalld</code><br><code>systemctl stop firewalld</code></p>
<span id="more"></span></li>
<li><p>开机启动或停止 防火墙<br><code>systemctl enable firewalld</code><br><code>systemctl disable firewalld</code></p>
</li>
</ul>
<ol start="2">
<li>添加端口</li>
</ol>
<ul>
<li>直接编辑规则文件</li>
</ul>
<p><code>vi /etc/firewalld/zones/public.xml</code></p>
<p>添加相应端口如下行:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;port <span class="attribute">protocol</span>=<span class="string">&quot;tcp&quot;</span> <span class="attribute">port</span>=<span class="string">&quot;服务器端口&quot;</span>/&gt;</span><br><span class="line">&lt;port <span class="attribute">protocol</span>=<span class="string">&quot;udp&quot;</span> <span class="attribute">port</span>=<span class="string">&quot;服务器端口&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>命令</li>
</ul>
<p><code>firewall-cmd --zone=public --add-port=port/tcp --permanent</code></p>
<ol start="3">
<li><p>安装v2ray &amp; 更新(更新的话在执行一遍即可)<br><code>bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</code></p>
</li>
<li><p>创建配置文件（&#x2F;etc&#x2F;v2ray&#x2F;config.json）</p>
</li>
<li><p>验证配置文件 &amp;&amp; 生成uuid<br><code>/usr/bin/v2ray/v2ray --test -config=/path/to/config.json</code><br>输出configuration ok即为合法的配置</p>
</li>
</ol>
<p><code>/usr/bin/v2ray/v2ctl uuid</code></p>
<ol start="6">
<li><p>v2ray命令<br><code>service v2ray start|stop|status|reload|restart|force-reload </code><br><code>systemctl enable/disable v2ray</code></p>
</li>
<li><p>修改ssh端口<br><code>vim /etc/ssh/sshd_config</code> 找到port修改<br><code>/etc/init.d/sshd restart</code> 重启ssh服务</p>
</li>
</ol>
<h3 id="ubuntu-系统"><a href="#ubuntu-系统" class="headerlink" title="ubuntu 系统"></a>ubuntu 系统</h3><ul>
<li>防火墙<br><code>apt install ufw</code> 安装防火墙ufw<br><code>vi /etc/default/ufw</code> 查看默认策略<br><code>ufw status [numbered]</code>  查看防火墙状态</li>
</ul>
<p><code>ufw allow[/deny] 80/tcp</code> 开启某个端口</p>
<ul>
<li><p>安装bbr2<br><code>./bbr2.sh</code> 执行大神们写好的脚本</p>
</li>
<li><p>安装v2ray</p>
</li>
</ul>
<ol>
<li><p>安装v2ray &amp; 更新(更新的话在执行一遍即可)<br><code>wget https://install.direct/go.sh &amp;&amp; bash go.sh</code></p>
</li>
<li><p>创建配置文件（&#x2F;etc&#x2F;v2ray&#x2F;config.json）</p>
</li>
<li><p>验证配置文件 &amp;&amp; 生成uuid<br><code>/usr/bin/v2ray/v2ray --test -config=/path/to/config.json</code><br>输出configuration ok即为合法的配置</p>
</li>
</ol>
<p><code>/usr/bin/v2ray/v2ctl uuid</code></p>
<ol start="4">
<li><p>v2ray命令<br><code>service v2ray start|stop|status|reload|restart|force-reload </code><br><code>systemctl enable/disable v2ray</code></p>
</li>
<li><p>修改ssh端口<br><code>vim /etc/ssh/sshd_config</code> 找到port修改<br><code>/etc/init.d/sshd restart</code> 重启ssh服务</p>
</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Faster Remainder by Direct Computation</title>
    <url>/2019/03/Faster%20Remainder%20by%20Direct%20Computation/</url>
    <content><![CDATA[<ol>
<li><p>introduction<br>  in general, on common processor machine, Integer multiplication is many times faster than division.<br>So dividing a numerator n by a divisor d is mathematically equivalent to multiplication by the inverse of the divisor<br> <code>n / d = n * (1/d)</code></p>
</li>
<li><p>faster remainder algorithm<br>  for detail, see paper<a href="https://arxiv.org/pdf/1902.01961.pdf">Faster Remainder by Direct Computation<br>Applications to Compilers and Software Libraries</a></p>
</li>
</ol>
<p>  the faster remainder algorithm implemented in c is following(unsigned and signed):</p>
<span id="more"></span>  
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint32_t</span> d = ...; <span class="comment">// your divisor &gt; 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// c = ceil ( (1 &lt; &lt;64) / d ) ; we take L = N</span></span><br><span class="line"><span class="type">uint64_t</span> c = UINT64_C (<span class="number">0xFFFFFFFFFFFFFFFF</span> ) / d + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fastmod computes (n mod d) given precomputed c</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">fastmod</span> <span class="params">( <span class="type">uint32_t</span> n <span class="comment">/* , uint64_t c, uint32_t d */</span>)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> lowbits = c * n;</span><br><span class="line">    <span class="keyword">return</span> (( <span class="type">__uint128_t</span> ) lowbits * d) &gt;&gt; <span class="number">64</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int32_t</span> d = ...; <span class="comment">// your non - zero divisor in [ -2147483647 ,2147483647]</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> pd = d &lt; <span class="number">0</span> ? -d : d; <span class="comment">// absolute value , abs (d)</span></span><br><span class="line"><span class="comment">// c = floor ( (1 &lt; &lt;64) / pd ) + 1; Take L = N + 1</span></span><br><span class="line"><span class="type">uint64_t</span> c = UINT64_C (<span class="number">0xFFFFFFFFFFFFFFFF</span> ) / pd</span><br><span class="line">+ <span class="number">1</span> + (( pd &amp; (pd <span class="number">-1</span>) ) ==<span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fastmod computes (n mod d) given precomputed c</span></span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">fastmod</span> <span class="params">( <span class="type">int32_t</span> n <span class="comment">/* , uint64_t c, uint32_t pd */</span>)</span> &#123;</span><br><span class="line">    <span class="type">uint64_t</span> lowbits = c * n;</span><br><span class="line">    <span class="type">int32_t</span> highbits = (( <span class="type">__uint128_t</span> ) lowbits * pd) &gt;&gt; <span class="number">64</span>;</span><br><span class="line">    <span class="comment">// answer is equivalent to (n &lt;0) ? highbits - 1 + d : highbits</span></span><br><span class="line">    <span class="keyword">return</span> highbits - (( pd - <span class="number">1</span>) &amp; (n &gt;&gt; <span class="number">31</span>) ) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>  judge divisiablility</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// calculate c for use in lkk_divisible</span></span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">lkk_cvalue</span> <span class="params">( <span class="type">uint32_t</span> d)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + UINT64_C (<span class="number">0xffffffffffffffff</span> ) / d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// given precomputed c, checks whether n % d == 0</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">lkk_divisible</span> <span class="params">( <span class="type">uint32_t</span> n, <span class="type">uint64_t</span> c)</span> &#123;</span><br><span class="line">    <span class="comment">// rhs is large when c ==0</span></span><br><span class="line">    <span class="keyword">return</span> n * c &lt;= c - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rotate n by e bits , avoiding undefined behaviors</span></span><br><span class="line"><span class="comment">// cf https :// blog . regehr . org / archives /1063</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">rotr32</span> <span class="params">( <span class="type">uint32_t</span> n, <span class="type">uint32_t</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (n &gt;&gt; e) | ( n &lt;&lt; ( ( -e) &amp;<span class="number">31</span>) ) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// does d divide n?</span></span><br><span class="line"><span class="comment">// d = 2** e * d_odd ; dbar = multiplicative_inverse ( d_odd )</span></span><br><span class="line"><span class="comment">// thresh = 0 xffffffff / d</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">gm_divisible</span> <span class="params">( <span class="type">uint32_t</span> n,</span></span><br><span class="line"><span class="params">    <span class="type">uint32_t</span> e, <span class="type">uint32_t</span> dbar ,</span></span><br><span class="line"><span class="params">    <span class="type">uint32_t</span> thresh )</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> rotr32 (n * dbar , e) &lt;= thresh ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Newton ’s method per Warren ,</span></span><br><span class="line"><span class="comment">// Hacker ’s Delight pp. 246 - -247</span></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">multiplicative_inverse</span> <span class="params">( <span class="type">uint32_t</span> d)</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> x0 = d + <span class="number">2</span> * ((d +<span class="number">1</span>) &amp; <span class="number">4</span>) ;</span><br><span class="line">    <span class="type">uint32_t</span> x1 = x0 * (<span class="number">2</span> - d * x0) ;</span><br><span class="line">    <span class="type">uint32_t</span> x2 = x1 * (<span class="number">2</span> - d * x1) ;</span><br><span class="line">    <span class="keyword">return</span> x2 * (<span class="number">2</span> - d * x2) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>design_pattern</title>
    <url>/2019/03/design_pattern/</url>
    <content><![CDATA[<h3 id="basic-principle"><a href="#basic-principle" class="headerlink" title="basic principle"></a>basic principle</h3><ul>
<li>SOLID<blockquote>
<blockquote>
<p>S: single resposibility<br><br> O: open-closed: open for extension, closed for modification<br><br>    <strong>simple shoud not go back to code&#x2F;modify somthing haveing writtern adn tested</strong><br> L: liskov substitution<br><br>    <strong>if interface is ok to type A, it should also is ok to its inherited type B</strong><br> I: interface segregation<br><br> D: dependency inversion<br><br>    <strong>high level module should not depend on low level; absraction should not depend on detail</strong></p>
</blockquote>
</blockquote>
</li>
</ul>
<h3 id="factory-method-pattern"><a href="#factory-method-pattern" class="headerlink" title="factory method pattern"></a>factory method pattern</h3><ol>
<li>Delegation of object creation to  factory method</li>
<li>Extensibility by permitting arbitrary many factory methods</li>
<li>Code reuse through runtime polymorphism</li>
<li>Decouple initialization of factories from  creating connections</li>
</ol>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Connection</span> &#123;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Connection</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="title">send</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TcpConnection</span>: <span class="keyword">public</span> Connection &#123;</span><br><span class="line">    <span class="built_in">send</span>() <span class="keyword">override</span> &#123;</span><br><span class="line">        implementations....</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UdpConnection</span>: <span class="keyword">public</span> Connection &#123;</span><br><span class="line">    <span class="built_in">send</span>() <span class="keyword">override</span> &#123;</span><br><span class="line">        implementations....</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ConnectionFactory</span> &#123;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">ConnectionFactory</span>() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::unique_ptr&lt;ConnectionFactory&gt; <span class="title">make</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">TcpConnectionFactory</span>: <span class="keyword">public</span> ConnectionFactory &#123;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;ConnectionFactory&gt; <span class="title">make</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        implementations...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">UdpConnectionFactory</span>: <span class="keyword">public</span> ConnectionFactory &#123;</span><br><span class="line">    <span class="function">std::unique_ptr&lt;ConnectionFactory&gt; <span class="title">make</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        implementations...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="structural-composite"><a href="#structural-composite" class="headerlink" title="structural: composite"></a>structural: composite</h3><ul>
<li>array backed property<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">widget</span> &#123;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">abilities</span> &#123;strenth, agi, teli, count&#125;;</span><br><span class="line">std::array&lt;<span class="type">int</span>, count&gt; properties;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>eos</title>
    <url>/2019/03/eos/</url>
    <content><![CDATA[<ol>
<li><p>Developer reference site<br><a href="https://developers.eos.io/">EOSIO Developer Portal</a></p>
</li>
<li><p>mainnet &amp; testnet site<br><a href="https://bloks.io/wallet">eos mainnet</a><br><a href="https://monitor.jungletestnet.io/#home">eos jungle2.0 testnet</a></p>
</li>
</ol>
<span id="more"></span>
<ol start="3">
<li>main components</li>
</ol>
<ul>
<li><code>cleos</code>(cli + eos &#x3D; cleos): command line interface to interact with the blockchain and to manage wallets.</li>
<li><code>nodeos</code>(node + eos &#x3D; nodeos): the core EOSIO node daemon that can be configured with plugins to run a node. Example uses are block production, dedicated API endpoints, and local development.</li>
<li><code>keosd</code>(key + eos &#x3D; keosd): component that securely stores EOSIO keys in wallets.</li>
<li><code>eosio.cdt</code>: eos contract devepment toolkit.</li>
</ul>
<ol start="4">
<li>获取抵押列表<br><code>cleos -u http://jungle2.cryptolions.io:80  system listbw wenstestnet1</code></li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>eos</tag>
      </tags>
  </entry>
  <entry>
    <title>hyperledger</title>
    <url>/2019/03/hyperledger/</url>
    <content><![CDATA[<h2 id="hyperledger-fabric"><a href="#hyperledger-fabric" class="headerlink" title="hyperledger fabric"></a>hyperledger fabric</h2><ol>
<li>ordering service: broadcast and establish concensus</li>
<li>identity and membership</li>
<li>scalable dissemination(optional): An optional peer-to-peer gossip service disseminates the blocks output by ordering service to all peers</li>
<li>smart-contract execution</li>
<li>ledger maintenance</li>
</ol>
<h3 id="limitation-of-Order-Execute-architecture"><a href="#limitation-of-Order-Execute-architecture" class="headerlink" title="limitation of Order-Execute architecture"></a>limitation of Order-Execute architecture</h3><ol>
<li>sequential execution</li>
<li>no deterministic code</li>
<li>confidentiality of execution</li>
</ol>
<h3 id="fabric-Execute-Order-Validation-architecture"><a href="#fabric-Execute-Order-Validation-architecture" class="headerlink" title="fabric Execute-Order-Validation architecture"></a>fabric Execute-Order-Validation architecture</h3><ol>
<li>node type</li>
</ol>
<ul>
<li>client: submit transaction proposals  and broadcast them</li>
<li>peer: execute transaction proposals and validate them and maintain blockchain ledger which is append-only<br>not all peers will execute the transaciton proposals, which called endorsing peers execute them.</li>
<li>ordering service node</li>
</ul>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>blockchain</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>linux_programming</title>
    <url>/2019/08/linux_programming/</url>
    <content><![CDATA[<h3 id="select-vs-poll-vs-epoll"><a href="#select-vs-poll-vs-epoll" class="headerlink" title="select() vs poll() vs epoll()"></a>select() vs poll() vs epoll()</h3><ol>
<li><p>select()<br><code>int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);</code></p>
</li>
<li><p>poll()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">poll</span> <span class="params">(<span class="keyword">struct</span> pollfd *fds, <span class="type">unsigned</span> <span class="type">int</span> nfds, <span class="type">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pollfd</span> &#123;</span><br><span class="line">      <span class="type">int</span> fd;</span><br><span class="line">      <span class="type">short</span> events; </span><br><span class="line">      <span class="type">short</span> revents;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>epoll()<br><code>epoll_create(), epoll_ctl(), epoll_wait()</code></p>
</li>
</ol>
<ul>
<li><p>select() have three bitmask-based set of fds(fd-set), poll() only have signle array of fds(pollfd structure)</p>
</li>
<li><p>select() will reconstruct the fds, so should build each set before each call; poll() has seperate events and returned events, so it don’t need.</p>
</li>
<li><p>select() and poll() manage everything in user mode and send sets each time to wait on, to add another fd we need to add it to the set and call select()&#x2F;poll() again();  however epoll() use epoll_create to create context in the kernel mode, using epoll_ctl to update the context.</p>
</li>
</ul>
<span id="more"></span>]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>rocksdb笔记</title>
    <url>/2020/07/rocksdb/</url>
    <content><![CDATA[<h3 id="rocksdb-读写"><a href="#rocksdb-读写" class="headerlink" title="rocksdb 读写"></a>rocksdb 读写</h3><p><img src="/images/2021/rocksdb_readwrite.jpg" alt="rockdb read_write"></p>
<ul>
<li><p>wal: write ahead log<br>it can be used to completely recover the data in memtable</p>
<blockquote>
<p>Options::wal_dir: the directory to store wal files<br>Options::wal_ttl: the timeout to delete the wal file</p>
</blockquote>
</li>
<li><p>memtable: the write cache of rocksdb</p>
</li>
<li><p>block cache: the read cache of rocksdb</p>
<span id="more"></span></li>
</ul>
<blockquote>
<p>when write, it write memtable and wal at the same time<br>when read, it will read  memtable and block cache first, then read sstable</p>
</blockquote>
<blockquote>
<p>by default, when we flush the memtable to table file, we also delete the wal file, since we don’t need it anymore for recovery(the data from the log is “persisted” in table file)</p>
</blockquote>
<h3 id="sst-file-sstable"><a href="#sst-file-sstable" class="headerlink" title="sst file(sstable)"></a>sst file(sstable)</h3><ul>
<li>sst: sorted string table</li>
<li>lsm tree: Log Structured Merge Tree</li>
</ul>
<p><img src="/images/2021/lsm_tree_example1.png" alt="lsm tree"></p>
<p>On level 0, files are sorted based on the time they are flushed. Their key range (as defined by FileMetaData.smallest and FileMetaData.largest) are mostly overlapped with each other. So it needs to look up every L0 file. As a result, key&#x2F;values are moved from L0 down the LSM tree gradually. Compaction sorts key&#x2F;values and split them into files. From level 1 and below, SST files are sorted based on key</p>
<p>Compaction is scheduled periodically to pick up files from an upper level and merges them with files from lower level</p>
<p>Internally, each SSTable contains a sequence of blocks (typically each block is 64KB in size, but this is configurable). A block index (stored at the end of the SSTable) is used to locate blocks; the index is loaded into memory when the SSTable is opened</p>
<p><strong>space amplification&#x3D; size_on_file_system &#x2F; size_of_user_data</strong></p>
<h3 id="compaction-amp-compression"><a href="#compaction-amp-compression" class="headerlink" title="compaction &amp; compression"></a>compaction &amp; compression</h3><ul>
<li>compaction options</li>
</ul>
<ol>
<li><p>options::disable_auto_compactions<br>disable automatic compaction</p>
</li>
<li><p>options.compaction_style<br>enable&#x2F;disable compaction and set compaction style</p>
</li>
<li><p>options.compaction_pri<br>indicated different algorithms to pick files to compact</p>
</li>
</ol>
<ul>
<li>other<br>dynamic level size target mode: enable it by set  <em>options.level_compaction_dynamic_level_bytes&#x3D;true</em>.</li>
</ul>
<p>level-based compaction<br>level’s size target</p>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>rocksdb</tag>
      </tags>
  </entry>
  <entry>
    <title>rust读书笔记</title>
    <url>/2021/05/rust%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="basic-concepts"><a href="#basic-concepts" class="headerlink" title="basic concepts"></a>basic concepts</h3><ul>
<li>crate: rust package</li>
<li>cargo: rust’s build system and package manager</li>
<li>prelude: pre-import module<ol>
<li>at the root of every crate, the compiler injects an implicit extern crate std;</li>
<li>in every module, the compiler injects an implicit use std::prelude::v1::*; (for now)</li>
</ol>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>macros</p>
<ol>
<li>declarative macro<br>  <code>macro_rules! vec&#123;&#125;</code></li>
<li>procedural macro (custom derive, attribute-like, function-like)  <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> proc_macro;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[some_attribute]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">some_name</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// derive</span></span><br><span class="line"><span class="meta">#[derive(HelloMacro)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Pancakes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    Pancakes::<span class="title function_ invoke__">hello_macro</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>some macros<ul>
<li><code>#[derive(Debug)]</code> :to use Debug trait(printable {:?})</li>
<li><code>#[cfg(test)]</code>: let rust only compile such code when use cargo test</li>
</ul>
</li>
</ol>
</li>
<li><p>main two return style</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::error::Error;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">Box</span>&lt;<span class="keyword">dyn</span> Error&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>)?;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ownership</p>
</li>
</ul>
<ol>
<li>By default, variable bindings have ‘move semantics.’</li>
<li>automatic referencing and dereferencing: Calling methods is one of the few places in Rust that has this behavior.<blockquote>
<p>when you call a method with object.something(), Rust automatically adds in &amp;, &amp;mut, or * so object matches the signature of the method. In other words, the following are the same:</p>
</blockquote>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">p1.distance(&amp;p2);</span><br><span class="line">(&amp;p1).distance(&amp;p2);</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>Associated functions &amp; methods</p>
</li>
<li><p>traits</p>
</li>
</ul>
<ol>
<li>One restriction to note with trait implementations is that we can implement a trait on a type only if either the trait or the type is local to our crate.</li>
<li>trait as parameter AND trait bound<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>(item: &amp;<span class="keyword">impl</span> <span class="title class_">Summary</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Breaking news! &#123;&#125;&quot;</span>, item.<span class="title function_ invoke__">summarize</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">notify</span>(item: &amp;(<span class="keyword">impl</span> <span class="title class_">Summary</span> + Display)) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">some_function</span>&lt;T: Display + <span class="built_in">Clone</span>, U: <span class="built_in">Clone</span> + <span class="built_in">Debug</span>&gt;(t: &amp;T, u: &amp;U) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">some_function</span>&lt;T, U&gt;(t: &amp;T, u: &amp;U) <span class="punctuation">-&gt;</span> <span class="type">i32</span></span><br><span class="line">    <span class="keyword">where</span> T: Display + <span class="built_in">Clone</span>,</span><br><span class="line">          U: <span class="built_in">Clone</span> + <span class="built_in">Debug</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>lifetime</li>
</ul>
<ol>
<li><code>&#39;static</code> means the reference can live in entire program.</li>
<li>lifetime ellision<blockquote>
<p>rule one : each parameter that is a reference gets its own lifetime parameter.</p>
<p>rule two: if there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime parameters.</p>
<p>rule three: if there are multiple input lifetime parameters, but one of them is &amp;self or &amp;mut self because this is a method, the lifetime of self is assigned to all output lifetime parameters.</p>
</blockquote>
</li>
</ol>
<h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><ol>
<li>the path of module</li>
</ol>
<ul>
<li>An absolute path starts from a crate root by using a crate name or a literal crate.</li>
<li>A relative path starts from the current module and uses self, super, or an identifier in the current module.</li>
</ul>
<ol start="2">
<li>nested path<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nested path</span></span><br><span class="line"><span class="comment">// --snip--</span></span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// --snip--</span></span><br><span class="line"><span class="keyword">use</span> std::&#123;cmp::Ordering, io&#125;;</span><br><span class="line"><span class="comment">// --snip--</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::io::Write;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::io::&#123;<span class="keyword">self</span>, Write&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bring all pub member to current scope</span></span><br><span class="line"><span class="keyword">use</span> std::collections::*;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>xray安装</title>
    <url>/2021/07/xray%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="centos-7-64-系统"><a href="#centos-7-64-系统" class="headerlink" title="centos 7(64) 系统"></a>centos 7(64) 系统</h3><ol>
<li>防火墙</li>
</ol>
<ul>
<li><p>查看防火墙是否开启<br><code>firewall-cmd --state</code></p>
</li>
<li><p>重载防火墙,使新规则生效<br><code>firewall-cmd --complete-reload</code></p>
</li>
<li><p>查看打开的端口<br><code>firewall-cmd --list-ports</code></p>
<span id="more"></span>
</li>
<li><p>启动&amp;停止 防火墙<br><code>sytemctl start firewalld</code><br><code>systemctl stop firewalld</code></p>
</li>
<li><p>开机启动或停止 防火墙<br><code>systemctl enable firewalld</code><br><code>systemctl disable firewalld</code></p>
</li>
</ul>
<ol start="2">
<li>添加端口</li>
</ol>
<ul>
<li>直接编辑规则文件</li>
</ul>
<p><code>vi /etc/firewalld/zones/public.xml</code></p>
<p>添加相应端口如下行:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;port <span class="attribute">protocol</span>=<span class="string">&quot;tcp&quot;</span> <span class="attribute">port</span>=<span class="string">&quot;服务器端口&quot;</span>/&gt;</span><br><span class="line">&lt;port <span class="attribute">protocol</span>=<span class="string">&quot;udp&quot;</span> <span class="attribute">port</span>=<span class="string">&quot;服务器端口&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>命令</li>
</ul>
<p><code>firewall-cmd --zone=public --add-port=port/tcp --permanent</code></p>
<ol start="3">
<li>安装xray &amp; 更新(更新的话在执行一遍即可)</li>
</ol>
<ul>
<li><p><a href="https://github.com/XTLS/Xray-install">xray github</a></p>
</li>
<li><p>相关安装路径</p>
</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">installed: <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>xray</span><br><span class="line">installed: <span class="regexp">/usr/</span>local<span class="regexp">/share/</span>xray/geoip.dat</span><br><span class="line">installed: <span class="regexp">/usr/</span>local<span class="regexp">/share/</span>xray/geosite.dat</span><br><span class="line">installed: <span class="regexp">/usr/</span>local<span class="regexp">/etc/</span>xray/config.json</span><br><span class="line">installed: <span class="regexp">/var/</span>log<span class="regexp">/xray/</span></span><br><span class="line">installed: <span class="regexp">/var/</span>log<span class="regexp">/xray/</span>access.log</span><br><span class="line">installed: <span class="regexp">/var/</span>log<span class="regexp">/xray/</span>error.log</span><br><span class="line">installed: <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>xray.service</span><br><span class="line">installed: <span class="regexp">/etc/</span>systemd<span class="regexp">/system/</span>xray@.servic</span><br></pre></td></tr></table></figure>
<ul>
<li><p>相关文档<br>XTLS.github.io</p>
</li>
<li><p>查看启动日志<br><code>journalctl -xe --no-pager -u xray</code></p>
</li>
</ul>
<h3 id="centos8开启bbr"><a href="#centos8开启bbr" class="headerlink" title="centos8开启bbr"></a>centos8开启bbr</h3><ol>
<li><p>开启bbr</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">echo <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line">echo <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证是否开启成功</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">sysctl -n net.ipv4.tcp_congestion_control</span><br><span class="line">lsmod <span class="string">| grep bbr</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="安装ssl证书"><a href="#安装ssl证书" class="headerlink" title="安装ssl证书"></a>安装ssl证书</h3><ol>
<li><p>安装acme.sh脚本<br><code>curl  https://get.acme.sh | sh</code><br>安装在: ~&#x2F;.aceme.sh</p>
</li>
<li><p>使aceme.sh脚本生效<br><code>source .bashrc</code></p>
</li>
<li><p>生成证书&amp;安装证书&amp;更新证书</p>
</li>
</ol>
<ul>
<li><p>生成证书<br><code>acme.sh --issue -d s388419.savps.ru --standalone --keylength ec-256 --force</code></p>
</li>
<li><p>安装证书</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mkdir ~/xray_cert</span><br><span class="line">acme<span class="selector-class">.sh</span> <span class="attr">--installcert</span> -d s388419<span class="selector-class">.savps</span><span class="selector-class">.ru</span> <span class="attr">--ecc</span> <span class="attr">--fullchain-file</span> ~/xray_cert/xray<span class="selector-class">.crt</span> <span class="attr">--key-file</span> ~/xray_cert/xray<span class="selector-class">.key</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// xray.key add read permission</span></span><br><span class="line">chmod +r ~/xray_cert/xray.key</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新证书</p>
<blockquote>
<p>由于 Let’s Encrypt 的证书有效期只有 3 个月，因此需要 90 天至少要更新一次证书，acme.sh 脚本会每 60 天自动更新证书. 也可以手动更新</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">acme<span class="selector-class">.sh</span> <span class="attr">--renew</span> -d s388419<span class="selector-class">.savps</span><span class="selector-class">.ru</span> <span class="attr">--force</span> <span class="attr">--ecc</span></span><br><span class="line">acme<span class="selector-class">.sh</span> <span class="attr">--installcert</span> -d s388419<span class="selector-class">.savps</span><span class="selector-class">.ru</span> <span class="attr">--ecc</span> <span class="attr">--fullchain-file</span> ~/xray_cert/xray<span class="selector-class">.crt</span> <span class="attr">--key-file</span> ~/xray_cert/xray.key</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>technique</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>股票学习</title>
    <url>/2022/08/%E8%82%A1%E7%A5%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="技术指标"><a href="#技术指标" class="headerlink" title="技术指标"></a>技术指标</h1><ol>
<li><p>MA(moving average)<br>计算方式：某一段时间的收盘价之和&#x2F;该段时间<br><br>$$MA &#x3D; \frac{P_1 + P_2 + … + P_n}{n}$$</p>
</li>
<li><p>WMA(weighted moving average)<br>$$WMA &#x3D; \frac{1<em>P_1 + 2</em>P_2 + … +(n-1)<em>P_{n-1}+ n</em>P_n}{\frac<br>{n*(n+1)}{2}}$$</p>
</li>
<li><p>EMA(exponential moveing average)</p>
</li>
<li><p>RSI(relative strength index)<br>$$RSI &#x3D; 100 - (\frac{100}{1+RS})$$<br>$$RS &#x3D; \frac{average\quad of\quad x\quad day’s\quad up\quad closes}{average \quad of\quad x\quad day’s\quad down\quad closes}$$</p>
</li>
</ol>
<h1 id="缠中说禅"><a href="#缠中说禅" class="headerlink" title="缠中说禅"></a>缠中说禅</h1><ol>
<li>均线系统</li>
</ol>
<ul>
<li><p>多头模式 vs 空头模式</p>
<blockquote>
<p>以7日均线以及14日均线为例： 7日均线长期在14日之上为多头， 反之为空头</p>
</blockquote>
</li>
<li><p>弱收敛、强收敛、交叉缠绕</p>
<blockquote>
<p>弱收敛：走势突破短期均线却不能突破长期均线<br><br>强收敛：走势突破长期均线然后形成陷阱<br><br>交叉：走势突破长期均线，然后反复<br></p>
</blockquote>
<span id="more"></span></li>
<li><p>均线缠绕买卖点</p>
<blockquote>
<p>第一个买点：空头模式最后一次缠绕通过背驰构成的空头陷阱(如果买入后又出现盘整缠绕，需卖掉)； 第二个买点： 空头变成多头后第一个缠绕点形成的低点(不能跌破前面空头的最低点)<br><br>第一个卖点：多头模式最后一次缠绕之后出现的背驰；第二个卖点：多头变成空头后第一个缠绕高点<br></p>
</blockquote>
</li>
</ul>
<blockquote>
<p>多头模式下的第一次缠绕中继的可能性大(如缠绕前短期均线的力度大)， 第三、第四次则转折的可能性大； 缠绕前的成交量不能放的过大，一旦过大，出现偏线的可能性则大大增加<br><br>空头模式下的最后一次缠绕确认， 一般第一次肯定不是， 第二次开始则都有可能</p>
</blockquote>
<ul>
<li><p>“下跌+上涨”买卖法<br></p>
<ol>
<li>选择出现”下跌 + 盘整 + 下跌“走势的股票</li>
<li>在第二阶段下跌时出现第一类买点时介入</li>
<li>介入后如出现盘整走势，坚决退出(如果不出现盘整，至少回升到“下跌+盘整+下跌”的盘整区域)</li>
</ol>
<blockquote>
<blockquote>
<p>对应的，对于“上涨+盘整+上涨”走势的股票，第二段上涨走势中出现第一类卖点，一定要走</p>
</blockquote>
</blockquote>
</li>
<li><p>缠中说禅走势中枢：至少三个连续次级别的走势类型所重叠的部分</p>
</li>
<li><p>资金利用率</p>
<blockquote>
<p>大级别买点介入的，可以在次级别第一类卖点出现时减仓，其后在第一类买点补仓</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>股票</tag>
      </tags>
  </entry>
  <entry>
    <title>远程访问设置</title>
    <url>/2023/04/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E8%AE%BE%E7%BD%AE%20/</url>
    <content><![CDATA[<p>最近远程访问家里的电脑，因为家里的电脑会关机或者设置了休眠，远程访问就失败，折腾了一会，发现可以通过wake on lan功能远程开机&#x2F;唤醒， 以下操作设置是在你已经可以正常远程访问你远程主机的前提下：</p>
<h2 id="打开wake-on-lan设置"><a href="#打开wake-on-lan设置" class="headerlink" title="打开wake on lan设置"></a>打开wake on lan设置</h2><ol>
<li><p>bios 设置（需要bios支持该功能）<br><img src="/images/2023/bios_wake_on_lan.bmp" alt="bios wakeonlan"></p>
</li>
<li><p>network adaptor(网卡适配器设置)</p>
</li>
</ol>
<ul>
<li>找到主机使用的网络适配器<br><br>  <img src="/images/2023/netw_wake_on_lan1.png" alt="network adaptor wakeonlan"></li>
<li>设置属性<br><br>  <img src="/images/2023/netw_wake_on_lan2.png" alt="network wakeonlan setting"><br>  <img src="/images/2023/netw_wake_on_lan3.png" alt="network wakeonlan setting"><span id="more"></span></li>
</ul>
<ol start="3">
<li>路由器设置转发(port forwarding)<br><br> 不同路由器设置不太相同，但大同小异， 所使用的端口为9</li>
</ol>
<h2 id="支持wol进行远程开机"><a href="#支持wol进行远程开机" class="headerlink" title="支持wol进行远程开机"></a>支持wol进行远程开机</h2><ol>
<li>bios 设置（需要bios支持该功能）<br>在power management下开启唤醒: power on by PCIe(或类似的不同主板不同)</li>
<li>network adaptor(网卡适配器设置)<br>将power saving mode关闭</li>
</ol>
<h2 id="发送wol-magic-packet"><a href="#发送wol-magic-packet" class="headerlink" title="发送wol magic packet"></a>发送wol magic packet</h2><ol>
<li><p>通过电脑</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install wakeonlan</span><br><span class="line">wakeonlan you:mac:address</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过手机<br> 在google play上找相应的wol软件， 如WolOn</p>
</li>
</ol>
]]></content>
      <categories>
        <category>technique</category>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
